{"version":3,"file":"src_app_job-offer_job-offer_module_ts.js","mappings":"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CA;AACA;AACA;AACA,SAASgQ,OAAO,CAAC3D,OAAO,EAAE+B,IAAI,EAAE;EAC5B,OAAO;IACHA,IAAI;IACJ7F,OAAO,EAAE8D,OAAO,CAAC9D,OAAO;IACxBkG,OAAO,EAAEpC,OAAO,CAACoC,OAAO;IACxBwB,OAAO,EAAE5D,OAAO,CAAC4D,OAAO;IACxB1E,MAAM,EAAEc,OAAO,CAACd,MAAM;IACtB8C,cAAc,EAAEhC,OAAO,CAACgC,cAAc;IACtCE,YAAY,EAAElC,OAAO,CAACkC,YAAY;IAClCD,eAAe,EAAEjC,OAAO,CAACiC;EAC7B,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM4B,UAAU,CAAC;EACblU,WAAW,CAACmU,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAACC,KAAK,EAAEpC,GAAG,EAAE5B,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9B,IAAIiE,GAAG;IACP;IACA,IAAID,KAAK,YAAYrC,WAAW,EAAE;MAC9B;MACA;MACAsC,GAAG,GAAGD,KAAK;IACf,CAAC,MACI;MACD;MACA;MACA;MACA;MACA,IAAI9H,OAAO,GAAGxB,SAAS;MACvB,IAAIsF,OAAO,CAAC9D,OAAO,YAAYD,WAAW,EAAE;QACxCC,OAAO,GAAG8D,OAAO,CAAC9D,OAAO;MAC7B,CAAC,MACI;QACDA,OAAO,GAAG,IAAID,WAAW,CAAC+D,OAAO,CA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,CAAC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMiX,YAAY,GAAG,oMAAoM;AACzN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMhjB,UAAU,CAAC;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO4B,GAAG,CAACA,GAAG,EAAE;IACZ,OAAOqhB,YAAY,CAACrhB,GAAG,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOshB,GAAG,CAACA,GAAG,EAAE;IACZ,OAAOC,YAAY,CAACD,GAAG,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO7hB,QAAQ,CAACoE,OAAO,EAAE;IACrB,OAAO2d,iBAAiB,CAAC3d,OAAO,CAAC;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO4d,YAAY,CAAC5d,OAAO,EAAE;IACzB,OAAO6d,qBAAqB,CAAC7d,OAAO,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOjE,KAAK,CAACiE,OAAO,EAAE;IAClB,OAAO8d,cAAc,CAAC9d,OAAO,CAAC;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOnE,SAAS,CAACA,SAAS,EAAE;IACxB,OAAOkiB,kBAAkB,CAACliB,SAAS,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOmiB,SAAS,CAACA,SAAS,EAAE;IACxB,OAAOC,kBAAkB,CAACD,SAAS,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOE,OAAO,CAACA,OAAO,EAAE;IACpB,OAAOC,gBAAgB,CAACD,OAAO,CAAC;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOE,aAAa,CAACpe,OAAO,EAAE;IAC1B,OAAOoe,aAAa,CAACpe,OAAO,CAAC;EACjC;EACA,OAAOqe,OAAO,CAACC,UAAU,EAAE;IACvB,OAAOD,OAAO,CAACC,UAAU,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,YAAY,CAACD,UAAU,EAAE;IAC5B,OAAOC,YAAY,CAACD,UAAU,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;AACA,SAASd,YAAY,CAACrhB,GAAG,EAAE;EACvB,OAAQ6D,OAAO,IAAK;IAChB,IAAImd,iBAAiB,CAACnd,O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gB;EAChF;EACA;AACJ;AACA;EACI,IAAIf,MAAM,GAAG;IACT,OAAO,IAAI,CAACnD,OAAO;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI5kB,KAAK,GAAG;IACR,OAAO,IAAI,CAACZ,MAAM,KAAK8nB,KAAK;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIhlB,OAAO,GAAG;IACV,OAAO,IAAI,CAAC9C,MAAM,KAAK+nB,OAAO;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI5D,OAAO,GAAG;IACV,OAAO,IAAI,CAACnkB,MAAM,IAAIgoB,OAAO;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI5D,QAAQ,GAAG;IACX,OAAO,IAAI,CAACpkB,MAAM,KAAKioB,QAAQ;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAI5D,OAAO,GAAG;IACV,OAAO,IAAI,CAACrkB,MAAM,KAAKioB,QAAQ;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIllB,KAAK,GAAG;IACR,OAAO,CAAC,IAAI,CAACuhB,QAAQ;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,SAAS,GAAG;IACZ,OAAO,CAAC,IAAI,CAACvhB,OAAO;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAI2mB,QAAQ,GAAG;IACX,OAAO,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,GAAI,IAAI,CAACjB,MAAM,GAAG,IAAI,CAACA,MAAM,CAACgB,QAAQ,GAAG,QAAS;EAC5F;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,aAAa,CAACnI,UAAU,EAAE;IACtB,IAAI,CAAC6H,iBAAiB,CAAC7H,UAAU,CAAC;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoI,kBAAkB,CAACpI,UAAU,EAAE;IAC3B,IAAI,CAAC8H,sBAAsB,CAAC9H,UAAU,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIkC,aAAa,CAAClC,UAAU,EAAE;IACtB,IAAI,CAACmI,aAAa,CAACjG,aAAa,CAAClC,UAAU,EAAE,IAAI,CAAC4B,cAAc,CAAC,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIyG,kBAAkB,CAACrI,UAAU,EAAE;IAC3B,IAAI,CAACoI,kBAAkB,CAAClG,aAAa,CAAClC,UAAU,EAAE,IAAI,CAAC8B,mBAAmB,CAAC,CAAC;EAChF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,gBAAgB,CAACtC,UAAU,EAAE;IACzB,IAAI,CAACmI,aAAa,CAAC7F,gBAAgB,CAACtC,UAAU,EAAE,IAAI,CAAC4B,cAAc,CAAC,CAAC;EACzE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI0G,qBAAqB,CAACtI,UAAU,EAAE;IAC9B,IAAI,CAACoI,kBAAkB,CAAC9F,gBAAgB,CAACtC,UAAU,EAAE,IAAI,CAAC8B,mBAAmB,CAAC,CAAC;EACnF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,YAAY,CAACjB,SAAS,EAAE;IACpB,OAAOiB,YAAY,CAAC,IAAI,CAACJ,cAAc,EAAEb,SAAS,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIwH,iBAAiB,CAACxH,SAAS,EAAE;IACzB,OAAOiB,YAAY,CAAC,IAAI,CAACF,mBAAmB,EAAEf,SAAS,CAAC;EAC5D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIyH,eAAe,GAAG;IACd,IAAI,CAACzH,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0H,oBAAoB,GAAG;IACnB,IAAI,CAACrF,cAAc,GAAG,IAAI;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIsF,aAAa,CAACC,IAAI,GAAG,CAAC,CAAC,EAAE;IACrB,IAAI,CAACrnB,OAAO,GAAG,IAAI;IACnB,IAAI,IAAI,CAACwiB,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAAC4E,aAAa,CAACC,IAAI,CAAC;IACpC;EACJ;EACA;AACJ;AACA;AACA;EACIE,gBAAgB,GAAG;IACf,IAAI,CAACH,aAAa,CAAC;MAAEE,QAAQ,EAAE;IAAK,CAAC,CAAC;IACtC,IAAI,CAACtB,aAAa,CAAE5lB,OAAO,IAAKA,OAAO,CAACmnB,gBAAgB,EAAE,CAAC;EAC/D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAe,CAACH,IAAI,GAAG,CAAC,CAAC,EAAE;IACvB,IAAI,CAACrnB,OAAO,GAAG,KAAK;IACpB,IAAI,CAAComB,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACJ,aAAa,CAAE5lB,OAAO,IAAK;MAC5BA,OAAO,CAAConB,eAAe,CAAC;QAAEF,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,IAAI,CAAC9E,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAACiF,cAAc,CAACJ,IAAI,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACL,IAAI,GAAG,CAAC,CAAC,EAAE;IACnB,IAAI,CAAC/F,QAAQ,GAAG,KAAK;IACrB,IAAI,IAAI,CAACkB,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAACkF,WAAW,CAACL,IAAI,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,cAAc,CAACN,IAAI,GAAG,CAAC,CAAC,EAAE;IACtB,IAAI,CAAC/F,QAAQ,GAAG,IAAI;IACpB,IAAI,CAAC4E,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACF,aAAa,CAAE5lB,OAAO,IAAK;MAC5BA,OAAO,CAACunB,cAAc,CAAC;QAAEL,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC9C,CAAC,CAAC;IACF,IAAI,IAAI,CAAC9E,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAACoF,eAAe,CAACP,IAAI,CAAC;IACtC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,aAAa,CAACR,IAAI,GAAG,CAAC,CAAC,EAAE;IACrB,IAAI,CAACrqB,MAAM,GAAGgoB,OAAO;IACrB,IAAIqC,IAAI,CAACS,SAAS,KAAK,KAAK,EAAE;MAC1B,IAAI,CAACtG,aAAa,CAAC9iB,IAAI,CAAC,IAAI,CAAC1B,MAAM,CAAC;IACxC;IACA,IAAI,IAAI,CAACwlB,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAACqF,aAAa,CAACR,IAAI,CAAC;IACpC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI1N,OAAO,CAAC0N,IAAI,GAAG,CAAC,CAAC,EAAE;IACf;IACA;IACA,MAAMU,iBAAiB,GAAG,IAAI,CAACC,kBAAkB,CAACX,IAAI,CAACC,QAAQ,CAAC;IAChE,IAAI,CAACtqB,MAAM,GAAGioB,QAAQ;IACtB,IAAI,CAAC/kB,MAAM,GAAG,IAAI;IAClB,IAAI,CAAC8lB,aAAa,CAAE5lB,OAAO,IAAK;MAC5BA,OAAO,CAACuZ,OAAO,CAAC;QAAE,GAAG0N,IAAI;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IAChD,CAAC,CAAC;IACF,IAAI,CAACW,YAAY,EAAE;IACnB,IAAIZ,IAAI,CAACS,SAAS,KAAK,KAAK,EAAE;MAC1B,IAAI,CAACrG,YAAY,CAAC/iB,IAAI,CAAC,IAAI,CAACT,KAAK,CAAC;MAClC,IAAI,CAACujB,aAAa,CAAC9iB,IAAI,CAAC,IAAI,CAAC1B,MAAM,CAAC;IACxC;IACA,IAAI,CAACkrB,gBAAgB,CAAC;MAAE,GAAGb,IAAI;MAAEU;IAAkB,CAAC,CAAC;IACrD,IAAI,CAACzB,iBAAiB,CAAC9iB,OAAO,CAAE2kB,QAAQ,IAAKA,QAAQ,CAAC,IAAI,CAAC,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,CAACf,IAAI,GAAG,CAAC,CAAC,EAAE;IACd;IACA;IACA,MAAMU,iBAAiB,GAAG,IAAI,CAACC,kBAAkB,CAACX,IAAI,CAACC,QAAQ,CAAC;IAChE,IAAI,CAACtqB,MAAM,GAAG8nB,KAAK;IACnB,IAAI,CAACkB,aAAa,CAAE5lB,OAAO,IAAK;MAC5BA,OAAO,CAACgoB,MAAM,CAAC;QAAE,GAAGf,IAAI;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC/C,CAAC,CAAC;IACF,IAAI,CAACe,sBAAsB,CAAC;MAAEf,QAAQ,EAAE,IAAI;MAAEQ,SAAS,EAAET,IAAI,CAACS;IAAU,CAAC,CAAC;IAC1E,IAAI,CAACI,gBAAgB,CAAC;MAAE,GAAGb,IAAI;MAAEU;IAAkB,CAAC,CAAC;IACrD,IAAI,CAACzB,iBAAiB,CAAC9iB,OAAO,CAAE2kB,QAAQ,IAAKA,QAAQ,CAAC,KAAK,CAAC,CAAC;EACjE;EACAD,gBAAgB,CAACb,IAAI,EAAE;IACnB,IAAI,IAAI,CAAC7E,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAAC6F,sBAAsB,CAAChB,IAAI,CAAC;MACzC,IAAI,CAACA,IAAI,CAACU,iBAAiB,EAAE;QACzB,IAAI,CAACvF,OAAO,CAACoF,eAAe,EAAE;MAClC;MACA,IAAI,CAACpF,OAAO,CAACiF,cAAc,EAAE;IACjC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIa,SAAS,CAAC3C,MAAM,EAAE;IACd,IAAI,CAACnD,OAAO,GAAGmD,MAAM;EACzB;EACA;AACJ;AACA;AACA;EACI4C,WAAW,GAAG;IACV,OAAO,IAAI,CAACtqB,KAAK;EACrB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoqB,sBAAsB,CAAChB,IAAI,GAAG,CAAC,CAAC,EAAE;IAC9B,IAAI,CAACmB,iBAAiB,EAAE;IACxB,IAAI,CAACP,YAAY,EAAE;IACnB,IAAI,IAAI,CAAC5G,OAAO,EAAE;MACd,IAAI,CAACoH,2BAA2B,EAAE;MAClC,IAAI,CAACvoB,MAAM,GAAG,IAAI,CAACwoB,aAAa,EAAE;MAClC,IAAI,CAAC1rB,MAAM,GAAG,IAAI,CAAC2rB,gBAAgB,EAAE;MACrC,IAAI,IAAI,CAAC3rB,MAAM,KAAK8nB,KAAK,IAAI,IAAI,CAAC9nB,MAAM,KAAKgoB,OAAO,EAAE;QAClD,IAAI,CAAC4D,kBAAkB,CAACvB,IAAI,CAACS,SAAS,CAAC;MAC3C;IACJ;IACA,IAAIT,IAAI,CAACS,SAAS,KAAK,KAAK,EAAE;MAC1B,IAAI,CAACrG,YAAY,CAAC/iB,IAAI,CAAC,IAAI,CAACT,KAAK,CAAC;MAClC,IAAI,CAACujB,aAAa,CAAC9iB,IAAI,CAAC,IAAI,CAAC1B,MAAM,CAAC;IACxC;IACA,IAAI,IAAI,CAACwlB,OAAO,IAAI,CAAC6E,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAAC9E,OAAO,CAAC6F,sBAAsB,CAAChB,IAAI,CAAC;IAC7C;EACJ;EACA;EACAwB,mBAAmB,CAACxB,IAAI,GAAG;IAAES,SAAS,EAAE;EAAK,CAAC,EAAE;IAC5C,IAAI,CAAC9B,aAAa,CAAE8C,IAAI,IAAKA,IAAI,CAACD,mBAAmB,CAACxB,IAAI,CAAC,CAAC;IAC5D,IAAI,CAACgB,sBAAsB,CAAC;MAAEf,QAAQ,EAAE,IAAI;MAAEQ,SAAS,EAAET,IAAI,CAACS;IAAU,CAAC,CAAC;EAC9E;EACAU,iBAAiB,GAAG;IAChB,IAAI,CAACxrB,MAAM,GAAG,IAAI,CAAC+rB,oBAAoB,EAAE,GAAG9D,QAAQ,GAAGH,KAAK;EAChE;EACA4D,aAAa,GAAG;IACZ,OAAO,IAAI,CAACjJ,SAAS,GAAG,IAAI,CAACA,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI;EACvD;EACAmJ,kBAAkB,CAACd,SAAS,EAAE;IAC1B,IAAI,IAAI,CAAChG,cAAc,EAAE;MACrB,IAAI,CAAC9kB,MAAM,GAAGgoB,OAAO;MACrB,IAAI,CAACmB,4BAA4B,GAAG,IAAI;MACxC,MAAM9G,GAAG,GAAGD,YAAY,CAAC,IAAI,CAAC0C,cAAc,CAAC,IAAI,CAAC,CAAC;MACnD,IAAI,CAACkH,4BAA4B,GAAG3J,GAAG,CAACtiB,SAAS,CAAEmD,MAAM,IAAK;QAC1D,IAAI,CAACimB,4BAA4B,GAAG,KAAK;QACzC;QACA;QACA;QACA,IAAI,CAAC8C,SAAS,CAAC/oB,MAAM,EAAE;UAAE4nB;QAAU,CAAC,CAAC;MACzC,CAAC,CAAC;IACN;EACJ;EACAW,2BAA2B,GAAG;IAC1B,IAAI,IAAI,CAACO,4BAA4B,EAAE;MACnC,IAAI,CAACA,4BAA4B,CAACE,WAAW,EAAE;MAC/C,IAAI,CAAC/C,4BAA4B,GAAG,KAAK;IAC7C;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8C,SAAS,CAAC/oB,MAAM,EAAEmnB,IAAI,GAAG,CAAC,CAAC,EAAE;IACzB,IAAI,CAACnnB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACipB,qBAAqB,CAAC9B,IAAI,CAACS,SAAS,KAAK,KAAK,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjoB,GAAG,CAACnG,IAAI,EAAE;IACN,IAAI0vB,QAAQ,GAAG1vB,IAAI;IACnB,IAAI0vB,QAAQ,IAAI,IAAI,EAChB,OAAO,IAAI;IACf,IAAI,CAAC3jB,KAAK,CAACkE,OAAO,CAACyf,QAAQ,CAAC,EACxBA,QAAQ,GAAGA,QAAQ,CAAC/tB,KAAK,CAAC,GAAG,CAAC;IAClC,IAAI+tB,QAAQ,CAAC7jB,MAAM,KAAK,CAAC,EACrB,OAAO,IAAI;IACf,OAAO6jB,QAAQ,CAAClb,MAAM,CAAC,CAAC9N,OAAO,EAAE0H,IAAI,KAAK1H,OAAO,IAAIA,OAAO,CAACipB,KAAK,CAACvhB,IAAI,CAAC,EAAE,IAAI,CAAC;EACnF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqa,QAAQ,CAACD,SAAS,EAAExoB,IAAI,EAAE;IACtB,MAAM0G,OAAO,GAAG1G,IAAI,GAAG,IAAI,CAACmG,GAAG,CAACnG,IAAI,CAAC,GAAG,IAAI;IAC5C,OAAO0G,OAAO,IAAIA,OAAO,CAACF,MAAM,GAAGE,OAAO,CAACF,MAAM,CAACgiB,SAAS,CAAC,GAAG,IAAI;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACID,QAAQ,CAACC,SAAS,EAAExoB,IAAI,EAAE;IACtB,OAAO,CAAC,CAAC,IAAI,CAACyoB,QAAQ,CAACD,SAAS,EAAExoB,IAAI,CA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CkG,IAAI,EAAE0M,gDAAK;MACXzV,IAAI,EAAE,CAAC,cAAc;IACzB,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM2sB,oBAAoB,GAAG;EACzBvZ,OAAO,EAAEiK,SAAS;EAClBhK,WAAW,EAAE8B,yDAAU,CAAC,MAAMyX,OAAO;AACzC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMxf,eAAe,GAAG,CAAC,MAAMC,OAAO,CAACC,OAAO,EAAE,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsf,OAAO,SAASvP,SAAS,CAAC;EAC5BvnB,WAAW,CAAC4qB,MAAM,EAAEjH,UAAU,EAAE8G,eAAe,EAAEmJ,cAAc,EAAEmD,kBAAkB,EAAElG,oBAAoB,EAAE;IACvG,KAAK,EAAE;IACP,IAAI,CAACkG,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAAClG,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACxrB,OAAO,GAAG,IAAIwwB,WAAW,EAAE;IAChC;IACA,IAAI,CAACmB,WAAW,GAAG,KAAK;IACxB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACtuB,MAAM,GAAG,IAAI/I,uDAAY,EAAE;IAChC,IAAI,CAAC8nB,OAAO,GAAGmD,MAAM;IACrB,IAAI,CAACjE,cAAc,CAAChD,UAAU,C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","sources":["./src/app/job-offer/job-offer-routing.module.ts","./src/app/job-offer/job-offer.module.ts","./src/app/job-offer/models/job-offer.model.ts","./src/app/job-offer/offer-form/offer-form.component.ts","./src/app/job-offer/offer-form/offer-form.component.html","./src/app/job-offer/pdf-preview/pdf-preview.component.ts","./src/app/job-offer/pdf-preview/pdf-preview.component.html","./src/app/job-offer/services/job-offer.service.ts","./src/app/job-offer/status-tracker/status-tracker.component.ts","./src/app/job-offer/status-tracker/status-tracker.component.html","./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js","./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js","./node_modules/@angular/common/fesm2020/http.mjs","./node_modules/@angular/forms/fesm2020/forms.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { OfferFormComponent } from './offer-form/offer-form.component';\nimport { PdfPreviewComponent } from './pdf-preview/pdf-preview.component';\nimport { StatusTrackerComponent } from './status-tracker/status-tracker.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    component: OfferFormComponent, // For now, show the form as home page\n    data: { showWelcome: true }\n  },\n  {\n    path: 'offer-form',\n    component: OfferFormComponent\n  },\n  {\n    path: 'pdf-preview',\n    component: PdfPreviewComponent\n  },\n  {\n    path: 'status-tracker',\n    component: StatusTrackerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class JobOfferRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { JobOfferRoutingModule } from './job-offer-routing.module';\nimport { OfferFormComponent } from './offer-form/offer-form.component';\nimport { PdfPreviewComponent } from './pdf-preview/pdf-preview.component';\nimport { StatusTrackerComponent } from './status-tracker/status-tracker.component';\n\n\n@NgModule({\n  declarations: [\n    OfferFormComponent,\n    PdfPreviewComponent,\n    StatusTrackerComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    JobOfferRoutingModule\n  ]\n})\nexport class JobOfferModule { }\n","export interface JobOffer {\r\n  id?: string;\r\n  recipientName: string;\r\n  recipientEmail: string;\r\n  jobTitle: string;\r\n  department: string;\r\n  salary: number;\r\n  startDate: string;\r\n  offerContent: string;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n}\r\n\r\nexport interface EnvelopeResponse {\r\n  envelopeId: string;\r\n  status: SignatureStatus;\r\n  recipientName: string;\r\n  recipientEmail: string;\r\n  documentName: string;\r\n  submissionTimestamp: string;\r\n}\r\n\r\nexport enum SignatureStatus {\r\n  DRAFT = 'draft',\r\n  GENERATED = 'generated', \r\n  SENT = 'sent',\r\n  DELIVERED = 'delivered',\r\n  VIEWED = 'viewed',\r\n  SIGNED = 'signed',\r\n  COMPLETED = 'completed',\r\n  DECLINED = 'declined',\r\n  EXPIRED = 'expired'\r\n}\r\n\r\nexport interface StatusUpdate {\r\n  status: SignatureStatus;\r\n  message: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: string;\r\n  colorClass: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  message?: string;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n","import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject, takeUntil } from 'rxjs';\nimport { JobOfferService } from '../services/job-offer.service';\nimport { JobOffer, SignatureStatus } from '../models/job-offer.model';\n\n@Component({\n  selector: 'app-offer-form',\n  templateUrl: './offer-form.component.html',\n  styleUrls: ['./offer-form.component.scss']\n})\nexport class OfferFormComponent implements OnInit, OnDestroy {\n  @Output() pdfGenerated = new EventEmitter<{ offerId: string, pdfUrl: string }>();\n  @Output() sentForSignature = new EventEmitter<{ envelopeId: string }>();\n\n  offerForm!: FormGroup;\n  minDate: string;\n  isLoading = false;\n  canPreview = false;\n  canSend = false;\n  isSent = false;\n  successMessage = '';\n  errorMessage = '';\n  currentOfferId: string | null = null;\n\n  private destroy$ = new Subject<void>();\n\n  placeholderText = `Dear [Recipient Name],\n\nWe are pleased to offer you the position of [Job Title] in our [Department] department. \n\nThis is a full-time position with an annual salary of $[Salary]. Your anticipated start date is [Start Date].\n\nIn this role, you will be responsible for:\n• [Key responsibility 1]\n• [Key responsibility 2]\n• [Key responsibility 3]\n\nWe believe your skills and experience make you an excellent fit for our team. This offer is contingent upon the successful completion of a background check and any other conditions outlined in our employment policies.\n\nPlease sign and return this offer letter to indicate your acceptance of this position. We look forward to having you join our team!\n\nBest regards,\n[Your Name]\n[Your Title]\n[Company Name]`;\n\n  constructor(\n    private fb: FormBuilder,\n    private jobOfferService: JobOfferService\n  ) {\n    this.minDate = new Date().toISOString().split('T')[0];\n  }\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.subscribeToStatusUpdates();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initializeForm(): void {\n    this.offerForm = this.fb.group({\n      recipientName: ['', [Validators.required, Validators.minLength(2)]],\n      recipientEmail: ['', [Validators.required, Validators.email]],\n      jobTitle: ['', [Validators.required, Validators.minLength(2)]],\n      department: ['', Validators.required],\n      salary: ['', [Validators.required, Validators.min(1)]],\n      startDate: ['', [Validators.required, this.futureDateValidator]],\n      offerContent: ['', [Validators.required, Validators.minLength(50)]]\n    });\n\n    // Set default content\n    this.offerForm.patchValue({\n      offerContent: this.placeholderText\n    });\n  }\n\n  private subscribeToStatusUpdates(): void {\n    this.jobOfferService.status$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(status => {\n        this.updateButtonStates(status);\n      });\n  }\n\n  private updateButtonStates(status: SignatureStatus): void {\n    this.canPreview = status === SignatureStatus.GENERATED || \n                     status === SignatureStatus.SENT || \n                     status === SignatureStatus.COMPLETED;\n    \n    this.canSend = status === SignatureStatus.GENERATED;\n    this.isSent = status === SignatureStatus.SENT || \n                  status === SignatureStatus.DELIVERED || \n                  status === SignatureStatus.VIEWED || \n                  status === SignatureStatus.SIGNED || \n                  status === SignatureStatus.COMPLETED;\n  }\n\n  onSubmit(): void {\n    if (this.offerForm.valid && !this.isLoading) {\n      this.generateOfferLetter();\n    }\n  }\n\n  private generateOfferLetter(): void {\n    this.isLoading = true;\n    this.clearMessages();\n\n    const formData = this.offerForm.value;\n    const offerData: JobOffer = {\n      ...formData,\n      id: this.generateId()\n    };\n\n    this.jobOfferService.generateOfferLetter(offerData)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          if (response.success && response.data) {\n            this.currentOfferId = offerData.id!;\n            this.successMessage = 'Offer letter generated successfully! You can now preview or send it for signature.';\n            this.pdfGenerated.emit({ \n              offerId: offerData.id!, \n              pdfUrl: response.data.pdfUrl \n            });\n          } else {\n            this.errorMessage = response.message || 'Failed to generate offer letter';\n          }\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = 'Failed to generate offer letter. Please try again.';\n          console.error('Generate offer error:', error);\n        }\n      });\n  }\n\n  onPreviewPDF(): void {\n    if (!this.currentOfferId) {\n      this.errorMessage = 'No offer letter generated. Please generate one first.';\n      return;\n    }\n\n    this.isLoading = true;\n    this.clearMessages();\n\n    this.jobOfferService.getPreviewUrl(this.currentOfferId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          if (response.success && response.data) {\n            // Open PDF in new window/tab\n            window.open(response.data.previewUrl, '_blank');\n            this.successMessage = 'PDF preview opened in new tab.';\n          } else {\n            this.errorMessage = response.message || 'Failed to get preview URL';\n          }\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = 'Failed to preview PDF. Please try again.';\n          console.error('Preview PDF error:', error);\n        }\n      });\n  }\n\n  onSendForSignature(): void {\n    if (!this.currentOfferId) {\n      this.errorMessage = 'No offer letter generated. Please generate one first.';\n      return;\n    }\n\n    this.isLoading = true;\n    this.clearMessages();\n\n    this.jobOfferService.sendForSignature(this.currentOfferId)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          if (response.success && response.data) {\n            const formData = this.offerForm.value;\n            this.successMessage = `Offer letter sent successfully to ${formData.recipientEmail}!`;\n            this.sentForSignature.emit({ \n              envelopeId: response.data.envelopeId \n            });\n          } else {\n            this.errorMessage = response.message || 'Failed to send offer letter';\n          }\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.errorMessage = 'Failed to send offer letter. Please try again.';\n          console.error('Send for signature error:', error);\n        }\n      });\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.offerForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n  getFieldError(fieldName: string): string {\n    const field = this.offerForm.get(fieldName);\n    if (field && field.errors) {\n      if (field.errors['required']) {\n        return 'This field is required.';\n      }\n      if (field.errors['email']) {\n        return 'Please enter a valid email address.';\n      }\n      if (field.errors['minlength']) {\n        const requiredLength = field.errors['minlength'].requiredLength;\n        return `Minimum length is ${requiredLength} characters.`;\n      }\n      if (field.errors['min']) {\n        return 'Please enter a valid positive number.';\n      }\n      if (field.errors['futureDate']) {\n        return 'Start date must be today or in the future.';\n      }\n    }\n    return '';\n  }\n\n  private futureDateValidator(control: any) {\n    if (!control.value) {\n      return null;\n    }\n    \n    const selectedDate = new Date(control.value);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    if (selectedDate < today) {\n      return { futureDate: true };\n    }\n    \n    return null;\n  }\n\n  private clearMessages(): void {\n    this.successMessage = '';\n    this.errorMessage = '';\n  }\n\n  private generateId(): string {\n    return 'offer-' + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Reset form to initial state\n  resetForm(): void {\n    this.offerForm.reset();\n    this.offerForm.patchValue({\n      offerContent: this.placeholderText\n    });\n    this.currentOfferId = null;\n    this.canPreview = false;\n    this.canSend = false;\n    this.isSent = false;\n    this.clearMessages();\n    this.jobOfferService.resetState();\n  }\n\n  // Get form data for external access\n  getFormData(): JobOffer | null {\n    if (this.offerForm.valid) {\n      return {\n        ...this.offerForm.value,\n        id: this.currentOfferId\n      };\n    }\n    return null;\n  }\n}\n","<!-- Job Offer Form Component -->\n<div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n  <!-- Header -->\n  <div class=\"px-6 py-4 border-b border-gray-200\">\n    <h2 class=\"text-lg font-medium text-gray-900 flex items-center\">\n      <i class=\"fas fa-edit text-primary mr-2\"></i>\n      Create Job Offer Letter\n    </h2>\n    <p class=\"mt-1 text-sm text-gray-600\">Fill out the form below to generate and send a job offer letter for signature.</p>\n  </div>\n\n  <!-- Form -->\n  <form [formGroup]=\"offerForm\" (ngSubmit)=\"onSubmit()\" class=\"p-6 space-y-6\">\n    <!-- Recipient Information Section -->\n    <div class=\"bg-gray-50 rounded-lg p-4\">\n      <h3 class=\"text-md font-medium text-gray-900 mb-4 flex items-center\">\n        <i class=\"fas fa-user-circle text-gray-600 mr-2\"></i>\n        Recipient Information\n      </h3>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <!-- Recipient Name -->\n        <div>\n          <label for=\"recipientName\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Recipient Name *\n          </label>\n          <input \n            type=\"text\" \n            id=\"recipientName\" \n            formControlName=\"recipientName\"\n            class=\"block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n            [class.border-danger]=\"isFieldInvalid('recipientName')\"\n            [class.border-gray-300]=\"!isFieldInvalid('recipientName')\"\n            placeholder=\"Enter recipient's full name\"\n          >\n          <div *ngIf=\"isFieldInvalid('recipientName')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('recipientName') }}\n          </div>\n        </div>\n\n        <!-- Recipient Email -->\n        <div>\n          <label for=\"recipientEmail\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Recipient Email *\n          </label>\n          <input \n            type=\"email\" \n            id=\"recipientEmail\" \n            formControlName=\"recipientEmail\"\n            class=\"block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n            [class.border-danger]=\"isFieldInvalid('recipientEmail')\"\n            [class.border-gray-300]=\"!isFieldInvalid('recipientEmail')\"\n            placeholder=\"recipient@company.com\"\n          >\n          <div *ngIf=\"isFieldInvalid('recipientEmail')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('recipientEmail') }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Job Details Section -->\n    <div class=\"bg-gray-50 rounded-lg p-4\">\n      <h3 class=\"text-md font-medium text-gray-900 mb-4 flex items-center\">\n        <i class=\"fas fa-briefcase text-gray-600 mr-2\"></i>\n        Job Details\n      </h3>\n      \n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <!-- Job Title -->\n        <div>\n          <label for=\"jobTitle\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Job Title *\n          </label>\n          <input \n            type=\"text\" \n            id=\"jobTitle\" \n            formControlName=\"jobTitle\"\n            class=\"block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n            [class.border-danger]=\"isFieldInvalid('jobTitle')\"\n            [class.border-gray-300]=\"!isFieldInvalid('jobTitle')\"\n            placeholder=\"e.g., Senior Software Engineer\"\n          >\n          <div *ngIf=\"isFieldInvalid('jobTitle')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('jobTitle') }}\n          </div>\n        </div>\n\n        <!-- Department -->\n        <div>\n          <label for=\"department\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Department *\n          </label>\n          <select \n            id=\"department\" \n            formControlName=\"department\"\n            class=\"block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n            [class.border-danger]=\"isFieldInvalid('department')\"\n            [class.border-gray-300]=\"!isFieldInvalid('department')\"\n          >\n            <option value=\"\">Select Department</option>\n            <option value=\"Engineering\">Engineering</option>\n            <option value=\"Product\">Product</option>\n            <option value=\"Design\">Design</option>\n            <option value=\"Marketing\">Marketing</option>\n            <option value=\"Sales\">Sales</option>\n            <option value=\"HR\">Human Resources</option>\n            <option value=\"Finance\">Finance</option>\n            <option value=\"Operations\">Operations</option>\n          </select>\n          <div *ngIf=\"isFieldInvalid('department')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('department') }}\n          </div>\n        </div>\n\n        <!-- Salary -->\n        <div>\n          <label for=\"salary\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Annual Salary *\n          </label>\n          <div class=\"relative\">\n            <span class=\"absolute left-3 top-2 text-gray-500\">$</span>\n            <input \n              type=\"number\" \n              id=\"salary\" \n              formControlName=\"salary\"\n              min=\"0\"\n              step=\"1000\"\n              class=\"block w-full pl-8 pr-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n              [class.border-danger]=\"isFieldInvalid('salary')\"\n              [class.border-gray-300]=\"!isFieldInvalid('salary')\"\n              placeholder=\"80000\"\n            >\n          </div>\n          <div *ngIf=\"isFieldInvalid('salary')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('salary') }}\n          </div>\n        </div>\n\n        <!-- Start Date -->\n        <div>\n          <label for=\"startDate\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n            Start Date *\n          </label>\n          <input \n            type=\"date\" \n            id=\"startDate\" \n            formControlName=\"startDate\"\n            [min]=\"minDate\"\n            class=\"block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n            [class.border-danger]=\"isFieldInvalid('startDate')\"\n            [class.border-gray-300]=\"!isFieldInvalid('startDate')\"\n          >\n          <div *ngIf=\"isFieldInvalid('startDate')\" class=\"text-danger text-xs mt-1\">\n            {{ getFieldError('startDate') }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Offer Letter Content -->\n    <div>\n      <label for=\"offerContent\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n        Job Offer Letter Content *\n      </label>\n      <div class=\"relative\">\n        <textarea \n          id=\"offerContent\" \n          formControlName=\"offerContent\"\n          rows=\"8\" \n          class=\"block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n          [class.border-danger]=\"isFieldInvalid('offerContent')\"\n          [class.border-gray-300]=\"!isFieldInvalid('offerContent')\"\n          [placeholder]=\"placeholderText\"\n        ></textarea>\n        <div class=\"absolute bottom-2 right-2 text-xs text-gray-400\">\n          Rich text formatting supported\n        </div>\n      </div>\n      <div *ngIf=\"isFieldInvalid('offerContent')\" class=\"text-danger text-xs mt-1\">\n        {{ getFieldError('offerContent') }}\n      </div>\n      <p class=\"mt-2 text-xs text-gray-500\">\n        <i class=\"fas fa-info-circle mr-1\"></i>\n        Use placeholders like [Recipient Name], [Job Title], etc. They will be automatically replaced.\n      </p>\n    </div>\n\n    <!-- Action Buttons -->\n    <div class=\"flex flex-col sm:flex-row gap-3 pt-6 border-t border-gray-200\">\n      <button \n        type=\"submit\" \n        [disabled]=\"offerForm.invalid || isLoading\"\n        class=\"flex-1 px-6 py-3 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-colors duration-200 flex items-center justify-center hover:bg-opacity-90\"\n        [class.bg-primary]=\"offerForm.valid && !isLoading\"\n        [class.text-white]=\"offerForm.valid && !isLoading\"\n        [class.bg-gray-400]=\"offerForm.invalid || isLoading\"\n        [class.text-gray-600]=\"offerForm.invalid || isLoading\"\n        [class.cursor-not-allowed]=\"offerForm.invalid || isLoading\"\n      >\n        <i *ngIf=\"!isLoading\" class=\"fas fa-file-pdf mr-2\"></i>\n        <i *ngIf=\"isLoading\" class=\"fas fa-spinner fa-spin mr-2\"></i>\n        {{ isLoading ? 'Generating...' : 'Generate Offer Letter' }}\n      </button>\n\n      <button \n        type=\"button\" \n        (click)=\"onPreviewPDF()\"\n        [disabled]=\"!canPreview || isLoading\"\n        class=\"flex-1 px-6 py-3 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 flex items-center justify-center\"\n        [class.bg-blue-600]=\"canPreview && !isLoading\"\n        [class.hover:bg-blue-700]=\"canPreview && !isLoading\"\n        [class.text-white]=\"canPreview && !isLoading\"\n        [class.bg-gray-100]=\"!canPreview || isLoading\"\n        [class.text-gray-400]=\"!canPreview || isLoading\"\n        [class.cursor-not-allowed]=\"!canPreview || isLoading\"\n      >\n        <i class=\"fas fa-eye mr-2\"></i>\n        Preview PDF\n      </button>\n\n      <button \n        type=\"button\" \n        (click)=\"onSendForSignature()\"\n        [disabled]=\"!canSend || isLoading\"\n        class=\"flex-1 px-6 py-3 rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 flex items-center justify-center hover:bg-opacity-90\"\n        [class.bg-green-600]=\"canSend && !isLoading && !isSent\"\n        [class.text-white]=\"canSend && !isLoading\"\n        [class.bg-gray-100]=\"!canSend || isLoading\"\n        [class.text-gray-400]=\"(!canSend || isLoading) && !isSent\"\n        [class.cursor-not-allowed]=\"!canSend || isLoading\"\n      >\n        <i *ngIf=\"!isSent\" class=\"fas fa-paper-plane mr-2\"></i>\n        <i *ngIf=\"isSent\" class=\"fas fa-check mr-2\"></i>\n        {{ isSent ? 'Sent' : 'Send for Signature' }}\n      </button>\n    </div>\n  </form>\n</div>\n\n<!-- Success/Error Messages -->\n<div *ngIf=\"successMessage\" class=\"mt-4 p-4 bg-success bg-opacity-10 border border-success rounded-md\">\n  <div class=\"flex\">\n    <div class=\"flex-shrink-0\">\n      <i class=\"fas fa-check-circle text-success\"></i>\n    </div>\n    <div class=\"ml-3\">\n      <p class=\"text-sm font-medium text-success\">{{ successMessage }}</p>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"errorMessage\" class=\"mt-4 p-4 bg-danger bg-opacity-10 border border-danger rounded-md\">\n  <div class=\"flex\">\n    <div class=\"flex-shrink-0\">\n      <i class=\"fas fa-exclamation-triangle text-danger\"></i>\n    </div>\n    <div class=\"ml-3\">\n      <p class=\"text-sm font-medium text-danger\">{{ errorMessage }}</p>\n    </div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-pdf-preview',\n  templateUrl: './pdf-preview.component.html',\n  styleUrls: ['./pdf-preview.component.scss']\n})\nexport class PdfPreviewComponent {\n\n}\n","<p>pdf-preview works!</p>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, Subject, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { \n  JobOffer, \n  EnvelopeResponse, \n  SignatureStatus, \n  StatusUpdate, \n  Activity, \n  ApiResponse \n} from '../models/job-offer.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobOfferService {\n  private readonly apiUrl = 'http://localhost:5000/api';\n  \n  // State management\n  private currentOfferSubject = new BehaviorSubject<JobOffer | null>(null);\n  private statusSubject = new BehaviorSubject<SignatureStatus>(SignatureStatus.DRAFT);\n  private activitiesSubject = new BehaviorSubject<Activity[]>([]);\n  private statusUpdatesSubject = new Subject<StatusUpdate>();\n\n  // Public observables\n  public readonly currentOffer$ = this.currentOfferSubject.asObservable();\n  public readonly status$ = this.statusSubject.asObservable();\n  public readonly activities$ = this.activitiesSubject.asObservable();\n  public readonly statusUpdates$ = this.statusUpdatesSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.initializeStatusPolling();\n  }\n\n  /**\n   * Generate PDF from job offer data\n   */\n  generateOfferLetter(offerData: JobOffer): Observable<ApiResponse<{ pdfUrl: string }>> {\n    return this.http.post<ApiResponse<{ pdfUrl: string }>>(`${this.apiUrl}/offers/generate`, offerData)\n      .pipe(\n        map(response => {\n          if (response.success) {\n            this.currentOfferSubject.next(offerData);\n            this.updateStatus(SignatureStatus.GENERATED, 'PDF Generated', 'Offer letter PDF created successfully');\n            this.addActivity('PDF Generated', 'Offer letter PDF created successfully', 'fas fa-file-pdf', 'text-blue-600');\n          }\n          return response;\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Get PDF preview URL\n   */\n  getPreviewUrl(offerId: string): Observable<ApiResponse<{ previewUrl: string }>> {\n    return this.http.get<ApiResponse<{ previewUrl: string }>>(`${this.apiUrl}/offers/${offerId}/preview`)\n      .pipe(\n        map(response => {\n          if (response.success) {\n            this.addActivity('PDF Previewed', 'Offer letter PDF was previewed', 'fas fa-eye', 'text-blue-600');\n          }\n          return response;\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Send offer letter for signature via simulated DocuSign\n   */\n  sendForSignature(offerId: string): Observable<ApiResponse<EnvelopeResponse>> {\n    return this.http.post<ApiResponse<EnvelopeResponse>>(`${this.apiUrl}/docusign/send`, { offerId })\n      .pipe(\n        map(response => {\n          if (response.success && response.data) {\n            this.updateStatus(SignatureStatus.SENT, 'Sent for Signature', `Sent to ${response.data.recipientEmail}`);\n            this.addActivity('Sent for Signature', `Envelope ID: ${response.data.envelopeId}`, 'fas fa-paper-plane', 'text-green-600');\n            this.startEnvelopeStatusPolling(response.data.envelopeId);\n          }\n          return response;\n        }),\n        catchError(this.handleError)\n      );\n  }\n\n  /**\n   * Check signature status\n   */\n  checkSignatureStatus(envelopeId: string): Observable<ApiResponse<{ status: SignatureStatus }>> {\n    return this.http.get<ApiResponse<{ status: SignatureStatus }>>(`${this.apiUrl}/docusign/status/${envelopeId}`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Get offer history\n   */\n  getOfferHistory(): Observable<ApiResponse<JobOffer[]>> {\n    return this.http.get<ApiResponse<JobOffer[]>>(`${this.apiUrl}/offers/history`)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Update current status and emit status update\n   */\n  private updateStatus(status: SignatureStatus, title: string, message: string): void {\n    this.statusSubject.next(status);\n    this.statusUpdatesSubject.next({\n      status,\n      message: title,\n      timestamp: new Date()\n    });\n  }\n\n  /**\n   * Add activity to the activity log\n   */\n  private addActivity(title: string, description: string, icon: string, colorClass: string): void {\n    const currentActivities = this.activitiesSubject.value;\n    const newActivity: Activity = {\n      id: this.generateId(),\n      title,\n      description,\n      icon,\n      colorClass,\n      timestamp: new Date()\n    };\n\n    const updatedActivities = [newActivity, ...currentActivities.slice(0, 4)]; // Keep only last 5\n    this.activitiesSubject.next(updatedActivities);\n  }\n\n  /**\n   * Start polling for envelope status updates (simulated)\n   */\n  private startEnvelopeStatusPolling(envelopeId: string): void {\n    // Simulate status updates over time\n    const statusSequence = [\n      { status: SignatureStatus.DELIVERED, delay: 5000, message: 'Email delivered to recipient' },\n      { status: SignatureStatus.VIEWED, delay: 15000, message: 'Recipient viewed the document' },\n      { status: SignatureStatus.SIGNED, delay: 30000, message: 'Document signed successfully' },\n      { status: SignatureStatus.COMPLETED, delay: 35000, message: 'Signature process completed' }\n    ];\n\n    statusSequence.forEach(update => {\n      setTimeout(() => {\n        this.updateStatus(update.status, this.getStatusTitle(update.status), update.message);\n        this.addActivity(this.getStatusTitle(update.status), update.message, this.getStatusIcon(update.status), this.getStatusColor(update.status));\n      }, update.delay);\n    });\n  }\n\n  /**\n   * Initialize status polling (for reconnection scenarios)\n   */\n  private initializeStatusPolling(): void {\n    // This would connect to real-time updates in a production app\n  }\n\n  /**\n   * Get status display title\n   */\n  private getStatusTitle(status: SignatureStatus): string {\n    const titles = {\n      [SignatureStatus.DRAFT]: 'Draft',\n      [SignatureStatus.GENERATED]: 'Generated',\n      [SignatureStatus.SENT]: 'Sent',\n      [SignatureStatus.DELIVERED]: 'Delivered',\n      [SignatureStatus.VIEWED]: 'Viewed',\n      [SignatureStatus.SIGNED]: 'Signed',\n      [SignatureStatus.COMPLETED]: 'Completed',\n      [SignatureStatus.DECLINED]: 'Declined',\n      [SignatureStatus.EXPIRED]: 'Expired'\n    };\n    return titles[status] || 'Unknown';\n  }\n\n  /**\n   * Get status icon\n   */\n  private getStatusIcon(status: SignatureStatus): string {\n    const icons = {\n      [SignatureStatus.DRAFT]: 'fas fa-edit',\n      [SignatureStatus.GENERATED]: 'fas fa-file-pdf',\n      [SignatureStatus.SENT]: 'fas fa-paper-plane',\n      [SignatureStatus.DELIVERED]: 'fas fa-envelope-open',\n      [SignatureStatus.VIEWED]: 'fas fa-eye',\n      [SignatureStatus.SIGNED]: 'fas fa-signature',\n      [SignatureStatus.COMPLETED]: 'fas fa-check-circle',\n      [SignatureStatus.DECLINED]: 'fas fa-times-circle',\n      [SignatureStatus.EXPIRED]: 'fas fa-clock'\n    };\n    return icons[status] || 'fas fa-circle';\n  }\n\n  /**\n   * Get status color class\n   */\n  private getStatusColor(status: SignatureStatus): string {\n    const colors = {\n      [SignatureStatus.DRAFT]: 'text-gray-600',\n      [SignatureStatus.GENERATED]: 'text-blue-600',\n      [SignatureStatus.SENT]: 'text-primary',\n      [SignatureStatus.DELIVERED]: 'text-yellow-600',\n      [SignatureStatus.VIEWED]: 'text-orange-600',\n      [SignatureStatus.SIGNED]: 'text-green-600',\n      [SignatureStatus.COMPLETED]: 'text-success',\n      [SignatureStatus.DECLINED]: 'text-danger',\n      [SignatureStatus.EXPIRED]: 'text-gray-500'\n    };\n    return colors[status] || 'text-gray-600';\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  /**\n   * Handle HTTP errors\n   */\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unknown error occurred';\n    \n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Client Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Server Error: ${error.status} - ${error.message}`;\n    }\n    \n    console.error('JobOfferService Error:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n\n  /**\n   * Reset service state\n   */\n  resetState(): void {\n    this.currentOfferSubject.next(null);\n    this.statusSubject.next(SignatureStatus.DRAFT);\n    this.activitiesSubject.next([]);\n  }\n\n  /**\n   * Get current offer data\n   */\n  getCurrentOffer(): JobOffer | null {\n    return this.currentOfferSubject.value;\n  }\n\n  /**\n   * Get current status\n   */\n  getCurrentStatus(): SignatureStatus {\n    return this.statusSubject.value;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-status-tracker',\n  templateUrl: './status-tracker.component.html',\n  styleUrls: ['./status-tracker.component.scss']\n})\nexport class StatusTrackerComponent {\n\n}\n","<p>status-tracker works!</p>\n","import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin(...args) {\n    const resultSelector = popResultSelector(args);\n    const { args: sources, keys } = argsArgArrayOrObject(args);\n    const result = new Observable((subscriber) => {\n        const { length } = sources;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(length);\n        let remainingCompletions = length;\n        let remainingEmissions = length;\n        for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            let hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, () => remainingCompletions--, undefined, () => {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { noop } from '../util/noop';\nexport function takeUntil(notifier) {\n    return operate((source, subscriber) => {\n        innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n        !subscriber.closed && source.subscribe(subscriber);\n    });\n}\n","/**\n * @license Angular v15.2.10\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    let headerValues;\n                    if (typeof values === 'string') {\n                        headerValues = [values];\n                    }\n                    else if (typeof values === 'number') {\n                        headerValues = [values.toString()];\n                    }\n                    else {\n                        headerValues = values.map((value) => value.toString());\n                    }\n                    if (headerValues.length > 0) {\n                        const key = name.toLowerCase();\n                        this.headers.set(key, headerValues);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClient });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        return chain(req, handler);\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n    }\n}\nHttpInterceptorHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpInterceptorHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpInterceptorHandler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n}\nJsonpClientBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpClientBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpClientBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nJsonpInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nJsonpInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXhrBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXhrBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfCookieExtractor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n}\nHttpXsrfInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpXsrfInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfInterceptor });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientXsrfModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        withXsrfConfiguration({\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n            headerName: XSRF_DEFAULT_HEADER_NAME,\n        }).ɵproviders,\n        { provide: XSRF_ENABLED, useValue: true },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientModule });\nHttpClientModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientModule, providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientJsonpModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n        withJsonpSupport().ɵproviders,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler };\n","/**\n * @license Angular v15.2.10\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, forwardRef, Optional, Inject, ɵisPromise, ɵisObservable, ɵRuntimeError, Self, EventEmitter, Input, Host, SkipSelf, ɵcoerceToBoolean, ChangeDetectorRef, Output, NgModule, Injectable, inject, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { from, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Base class for all ControlValueAccessor classes defined in Forms package.\n * Contains common logic and utility functions.\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BaseControlValueAccessor {\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         * @nodoc\n         */\n        this.onChange = (_) => { };\n        /**\n         * The registered callback function called when a blur event occurs on the input element.\n         * @nodoc\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Helper method that sets a property on a target element using the current Renderer\n     * implementation.\n     * @nodoc\n     */\n    setProperty(key, value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, key, value);\n    }\n    /**\n     * Registers a function called when the control is touched.\n     * @nodoc\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     * @nodoc\n     */\n    setDisabledState(isDisabled) {\n        this.setProperty('disabled', isDisabled);\n    }\n}\nBaseControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BaseControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nBaseControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: BaseControlValueAccessor, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BaseControlValueAccessor, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; } });\n/**\n * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is\n * used in case no other CVAs can be found). We use this class to distinguish between default CVA,\n * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom\n * ones with higher priority (when both built-in and custom CVAs are present).\n *\n * Note: this is an *internal-only* class and should not be extended or used directly in\n * applications code.\n */\nclass BuiltInControlValueAccessor extends BaseControlValueAccessor {\n}\nBuiltInControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BuiltInControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nBuiltInControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: BuiltInControlValueAccessor, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BuiltInControlValueAccessor, decorators: [{\n            type: Directive\n        }] });\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * @publicApi\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * @description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * @usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass CheckboxControlValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"checked\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('checked', value);\n    }\n}\nCheckboxControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: CheckboxControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nCheckboxControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.checked)\", \"blur\": \"onTouched()\" } }, providers: [CHECKBOX_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: CheckboxControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                }]\n        }] });\n\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid() {\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * @description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * @publicApi\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * {@searchKeywords ngDefaultControl}\n *\n * @usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * This value accessor is used by default for `<input type=\"text\">` and `<textarea>` elements, but\n * you could also use it for custom components that have similar behavior and do not require special\n * processing. In order to attach the default value accessor to a custom element, add the\n * `ngDefaultControl` attribute as shown below.\n *\n * ```\n * <custom-input-component ngDefaultControl [(ngModel)]=\"value\"></custom-input-component>\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass DefaultValueAccessor extends BaseControlValueAccessor {\n    constructor(renderer, elementRef, _compositionMode) {\n        super(renderer, elementRef);\n        this._compositionMode = _compositionMode;\n        /** Whether the user is creating a composition string (IME events). */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /** @internal */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /** @internal */\n    _compositionStart() {\n        this._composing = true;\n    }\n    /** @internal */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DefaultValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nDefaultValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\", host: { listeners: { \"input\": \"$any(this)._handleInput($event.target.value)\", \"blur\": \"onTouched()\", \"compositionstart\": \"$any(this)._compositionStart()\", \"compositionend\": \"$any(this)._compositionEnd($event.target.value)\" } }, providers: [DEFAULT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DefaultValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [COMPOSITION_BUFFER_MODE]\n                }] }]; } });\n\nconst NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;\nfunction isEmptyInputValue(value) {\n    /**\n     * Check if the object is a string or array before evaluating the length attribute.\n     * This avoids falsely rejecting objects that contain a custom length attribute.\n     * For example, the object {id: 1, length: 0, width: 0} should not be returned as empty.\n     */\n    return value == null ||\n        ((typeof value === 'string' || Array.isArray(value)) && value.length === 0);\n}\nfunction hasValidLength(value) {\n    // non-strict comparison is intentional, to check for both `null` and `undefined` values\n    return value != null && typeof value.length === 'number';\n}\n/**\n * @description\n * An `InjectionToken` for registering additional synchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * @description\n * An `InjectionToken` for registering additional asynchronous validators used with\n * `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * @usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * @Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Promise<ValidationErrors|null> {\n *     return Promise.resolve({'custom': true});\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * @description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * @publicApi\n */\nclass Validators {\n    /**\n     * @description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static min(min) {\n        return minValidator(min);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     *\n     * @usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static max(max) {\n        return maxValidator(max);\n    }\n    /**\n     * @description\n     * Validator that requires the control have a non-empty value.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static required(control) {\n        return requiredValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('some value', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @returns An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static requiredTrue(control) {\n        return requiredTrueValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular\n     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common use cases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML\n     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n     * lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @returns An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static email(control) {\n        return emailValidator(control);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays. The\n     * `minLength` validator logic is also not invoked for values when their `length` property is 0\n     * (for example in case of an empty string or an empty array), to support optional controls. You\n     * can use the standard `required` validator if empty values should not be considered valid.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `minlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static minLength(minLength) {\n        return minLengthValidator(minLength);\n    }\n    /**\n     * @description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used\n     * only for types that have a numeric `length` property, such as strings or arrays.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @returns A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static maxLength(maxLength) {\n        return maxLengthValidator(maxLength);\n    }\n    /**\n     * @description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * @usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * ### Pattern matching with the global or sticky flag\n     *\n     * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`\n     * can produce different results on the same input when validations are run consecutively. This is\n     * due to how the behavior of `RegExp.prototype.test` is\n     * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)\n     * (`RegExp` preserves the index of the last match when the global or sticky flag is used).\n     * Due to this behavior, it is recommended that when using\n     * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky\n     * flag enabled.\n     *\n     * ```typescript\n     * // Not recommended (since the `g` flag is used)\n     * const controlOne = new FormControl('1', Validators.pattern(/foo/g));\n     *\n     * // Good\n     * const controlTwo = new FormControl('1', Validators.pattern(/foo/));\n     * ```\n     *\n     * @param pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @returns A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static pattern(pattern) {\n        return patternValidator(pattern);\n    }\n    /**\n     * @description\n     * Validator that performs no operation.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static nullValidator(control) {\n        return nullValidator(control);\n    }\n    static compose(validators) {\n        return compose(validators);\n    }\n    /**\n     * @description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @returns A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     */\n    static composeAsync(validators) {\n        return composeAsync(validators);\n    }\n}\n/**\n * Validator that requires the control's value to be greater than or equal to the provided number.\n * See `Validators.min` for additional information.\n */\nfunction minValidator(min) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n        return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control's value to be less than or equal to the provided number.\n * See `Validators.max` for additional information.\n */\nfunction maxValidator(max) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = parseFloat(control.value);\n        // Controls with NaN values after parsing should be treated as not having a\n        // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n        return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n    };\n}\n/**\n * Validator that requires the control have a non-empty value.\n * See `Validators.required` for additional information.\n */\nfunction requiredValidator(control) {\n    return isEmptyInputValue(control.value) ? { 'required': true } : null;\n}\n/**\n * Validator that requires the control's value be true. This validator is commonly\n * used for required checkboxes.\n * See `Validators.requiredTrue` for additional information.\n */\nfunction requiredTrueValidator(control) {\n    return control.value === true ? null : { 'required': true };\n}\n/**\n * Validator that requires the control's value pass an email validation test.\n * See `Validators.email` for additional information.\n */\nfunction emailValidator(control) {\n    if (isEmptyInputValue(control.value)) {\n        return null; // don't validate empty values to allow optional controls\n    }\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n}\n/**\n * Validator that requires the length of the control's value to be greater than or equal\n * to the provided minimum length. See `Validators.minLength` for additional information.\n */\nfunction minLengthValidator(minLength) {\n    return (control) => {\n        if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {\n            // don't validate empty values to allow optional controls\n            // don't validate values without `length` property\n            return null;\n        }\n        return control.value.length < minLength ?\n            { 'minlength': { 'requiredLength': minLength, 'actualLength': control.value.length } } :\n            null;\n    };\n}\n/**\n * Validator that requires the length of the control's value to be less than or equal\n * to the provided maximum length. See `Validators.maxLength` for additional information.\n */\nfunction maxLengthValidator(maxLength) {\n    return (control) => {\n        return hasValidLength(control.value) && control.value.length > maxLength ?\n            { 'maxlength': { 'requiredLength': maxLength, 'actualLength': control.value.length } } :\n            null;\n    };\n}\n/**\n * Validator that requires the control's value to match a regex pattern.\n * See `Validators.pattern` for additional information.\n */\nfunction patternValidator(pattern) {\n    if (!pattern)\n        return nullValidator;\n    let regex;\n    let regexStr;\n    if (typeof pattern === 'string') {\n        regexStr = '';\n        if (pattern.charAt(0) !== '^')\n            regexStr += '^';\n        regexStr += pattern;\n        if (pattern.charAt(pattern.length - 1) !== '$')\n            regexStr += '$';\n        regex = new RegExp(regexStr);\n    }\n    else {\n        regexStr = pattern.toString();\n        regex = pattern;\n    }\n    return (control) => {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        const value = control.value;\n        return regex.test(value) ? null :\n            { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n    };\n}\n/**\n * Function that has `ValidatorFn` shape, but performs no operation.\n */\nfunction nullValidator(control) {\n    return null;\n}\nfunction isPresent(o) {\n    return o != null;\n}\nfunction toObservable(value) {\n    const obs = ɵisPromise(value) ? from(value) : value;\n    if (NG_DEV_MODE$1 && !(ɵisObservable(obs))) {\n        let errorMessage = `Expected async validator to return Promise or Observable.`;\n        // A synchronous validator will return object or null.\n        if (typeof value === 'object') {\n            errorMessage +=\n                ' Are you using a synchronous validator where an async validator is expected?';\n        }\n        throw new ɵRuntimeError(-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);\n    }\n    return obs;\n}\nfunction mergeErrors(arrayOfErrors) {\n    let res = {};\n    arrayOfErrors.forEach((errors) => {\n        res = errors != null ? { ...res, ...errors } : res;\n    });\n    return Object.keys(res).length === 0 ? null : res;\n}\nfunction executeValidators(control, validators) {\n    return validators.map(validator => validator(control));\n}\nfunction isValidatorFn(validator) {\n    return !validator.validate;\n}\n/**\n * Given the list of validators that may contain both functions as well as classes, return the list\n * of validator functions (convert validator classes into validator functions). This is needed to\n * have consistent structure in validators list before composing them.\n *\n * @param validators The set of validators that may contain validators both in plain function form\n *     as well as represented as a validator class.\n */\nfunction normalizeValidators(validators) {\n    return validators.map(validator => {\n        return isValidatorFn(validator) ?\n            validator :\n            ((c) => validator.validate(c));\n    });\n}\n/**\n * Merges synchronous validators into a single validator function.\n * See `Validators.compose` for additional information.\n */\nfunction compose(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        return mergeErrors(executeValidators(control, presentValidators));\n    };\n}\n/**\n * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),\n * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single\n * validator function.\n */\nfunction composeValidators(validators) {\n    return validators != null ? compose(normalizeValidators(validators)) : null;\n}\n/**\n * Merges asynchronous validators into a single validator function.\n * See `Validators.composeAsync` for additional information.\n */\nfunction composeAsync(validators) {\n    if (!validators)\n        return null;\n    const presentValidators = validators.filter(isPresent);\n    if (presentValidators.length == 0)\n        return null;\n    return function (control) {\n        const observables = executeValidators(control, presentValidators).map(toObservable);\n        return forkJoin(observables).pipe(map(mergeErrors));\n    };\n}\n/**\n * Accepts a list of async validators of different possible shapes (`AsyncValidator` and\n * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges\n * them into a single validator function.\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? composeAsync(normalizeValidators(validators)) :\n        null;\n}\n/**\n * Merges raw control validators with a given directive validator and returns the combined list of\n * validators as an array.\n */\nfunction mergeValidators(controlValidators, dirValidator) {\n    if (controlValidators === null)\n        return [dirValidator];\n    return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] :\n        [controlValidators, dirValidator];\n}\n/**\n * Retrieves the list of raw synchronous validators attached to a given control.\n */\nfunction getControlValidators(control) {\n    return control._rawValidators;\n}\n/**\n * Retrieves the list of raw asynchronous validators attached to a given control.\n */\nfunction getControlAsyncValidators(control) {\n    return control._rawAsyncValidators;\n}\n/**\n * Accepts a singleton validator, an array, or null, and returns an array type with the provided\n * validators.\n *\n * @param validators A validator, validators, or null.\n * @returns A validators array.\n */\nfunction makeValidatorsArray(validators) {\n    if (!validators)\n        return [];\n    return Array.isArray(validators) ? validators : [validators];\n}\n/**\n * Determines whether a validator or validators array has a given validator.\n *\n * @param validators The validator or validators to compare against.\n * @param validator The validator to check.\n * @returns Whether the validator is present.\n */\nfunction hasValidator(validators, validator) {\n    return Array.isArray(validators) ? validators.includes(validator) : validators === validator;\n}\n/**\n * Combines two arrays of validators into one. If duplicates are provided, only one will be added.\n *\n * @param validators The new validators.\n * @param currentValidators The base array of current validators.\n * @returns An array of validators.\n */\nfunction addValidators(validators, currentValidators) {\n    const current = makeValidatorsArray(currentValidators);\n    const validatorsToAdd = makeValidatorsArray(validators);\n    validatorsToAdd.forEach((v) => {\n        // Note: if there are duplicate entries in the new validators array,\n        // only the first one would be added to the current list of validators.\n        // Duplicate ones would be ignored since `hasValidator` would detect\n        // the presence of a validator function and we update the current list in place.\n        if (!hasValidator(current, v)) {\n            current.push(v);\n        }\n    });\n    return current;\n}\nfunction removeValidators(validators, currentValidators) {\n    return makeValidatorsArray(currentValidators).filter(v => !hasValidator(validators, v));\n}\n\n/**\n * @description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * @publicApi\n */\nclass AbstractControlDirective {\n    constructor() {\n        /**\n         * Set of synchronous validators as they were provided while calling `setValidators` function.\n         * @internal\n         */\n        this._rawValidators = [];\n        /**\n         * Set of asynchronous validators as they were provided while calling `setAsyncValidators`\n         * function.\n         * @internal\n         */\n        this._rawAsyncValidators = [];\n        /*\n         * The set of callbacks to be invoked when directive instance is being destroyed.\n         */\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Reports the value of the control if it is present, otherwise null.\n     */\n    get value() {\n        return this.control ? this.control.value : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     */\n    get valid() {\n        return this.control ? this.control.valid : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     */\n    get invalid() {\n        return this.control ? this.control.invalid : null;\n    }\n    /**\n     * @description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     */\n    get pending() {\n        return this.control ? this.control.pending : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     */\n    get disabled() {\n        return this.control ? this.control.disabled : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     */\n    get enabled() {\n        return this.control ? this.control.enabled : null;\n    }\n    /**\n     * @description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     */\n    get errors() {\n        return this.control ? this.control.errors : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get pristine() {\n        return this.control ? this.control.pristine : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     */\n    get dirty() {\n        return this.control ? this.control.dirty : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get touched() {\n        return this.control ? this.control.touched : null;\n    }\n    /**\n     * @description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     */\n    get status() {\n        return this.control ? this.control.status : null;\n    }\n    /**\n     * @description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     */\n    get untouched() {\n        return this.control ? this.control.untouched : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * @description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return null;\n    }\n    /**\n     * Sets synchronous validators for this directive.\n     * @internal\n     */\n    _setValidators(validators) {\n        this._rawValidators = validators || [];\n        this._composedValidatorFn = composeValidators(this._rawValidators);\n    }\n    /**\n     * Sets asynchronous validators for this directive.\n     * @internal\n     */\n    _setAsyncValidators(validators) {\n        this._rawAsyncValidators = validators || [];\n        this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * @description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     */\n    get validator() {\n        return this._composedValidatorFn || null;\n    }\n    /**\n     * @description\n     * Asynchronous validator function composed of all the asynchronous validators registered with\n     * this directive.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn || null;\n    }\n    /**\n     * Internal function to register callbacks that should be invoked\n     * when directive instance is being destroyed.\n     * @internal\n     */\n    _registerOnDestroy(fn) {\n        this._onDestroyCallbacks.push(fn);\n    }\n    /**\n     * Internal function to invoke all registered \"on destroy\" callbacks.\n     * Note: calling this function also clears the list of callbacks.\n     * @internal\n     */\n    _invokeOnDestroyCallbacks() {\n        this._onDestroyCallbacks.forEach(fn => fn());\n        this._onDestroyCallbacks = [];\n    }\n    /**\n     * @description\n     * Resets the control with the provided value if the control is present.\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\n\n/**\n * @description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * @publicApi\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * @description\n     * The top-level form directive for the control.\n     */\n    get formDirective() {\n        return null;\n    }\n    /**\n     * @description\n     * The path to this group.\n     */\n    get path() {\n        return null;\n    }\n}\n\n/**\n * @description\n * A base class that all `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * @publicApi\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * @description\n         * The parent form for the control.\n         *\n         * @internal\n         */\n        this._parent = null;\n        /**\n         * @description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * @description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n    }\n}\n\n// DO NOT REFACTOR!\n// Each status is represented by a separate function to make sure that\n// advanced Closure Compiler optimizations related to property renaming\n// can work correctly.\nclass AbstractControlStatus {\n    constructor(cd) {\n        this._cd = cd;\n    }\n    get isTouched() {\n        return !!this._cd?.control?.touched;\n    }\n    get isUntouched() {\n        return !!this._cd?.control?.untouched;\n    }\n    get isPristine() {\n        return !!this._cd?.control?.pristine;\n    }\n    get isDirty() {\n        return !!this._cd?.control?.dirty;\n    }\n    get isValid() {\n        return !!this._cd?.control?.valid;\n    }\n    get isInvalid() {\n        return !!this._cd?.control?.invalid;\n    }\n    get isPending() {\n        return !!this._cd?.control?.pending;\n    }\n    get isSubmitted() {\n        // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but\n        // we avoid instanceof checks to prevent non-tree-shakable references to those types.\n        return !!this._cd?.submitted;\n    }\n}\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'isUntouched',\n    '[class.ng-touched]': 'isTouched',\n    '[class.ng-pristine]': 'isPristine',\n    '[class.ng-dirty]': 'isDirty',\n    '[class.ng-valid]': 'isValid',\n    '[class.ng-invalid]': 'isInvalid',\n    '[class.ng-pending]': 'isPending',\n};\nconst ngGroupStatusHost = {\n    ...ngControlStatusHost,\n    '[class.ng-submitted]': 'isSubmitted',\n};\n/**\n * @description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * @usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgControlStatus, deps: [{ token: NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgControlStatus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\" } }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgControlStatus, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]\n        }], ctorParameters: function () { return [{ type: NgControl, decorators: [{\n                    type: Self\n                }] }]; } });\n/**\n * @description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional\n * class ng-submitted.\n *\n * @see `NgControlStatus`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatusGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgControlStatusGroup, deps: [{ token: ControlContainer, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgControlStatusGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\", host: { properties: { \"class.ng-untouched\": \"isUntouched\", \"class.ng-touched\": \"isTouched\", \"class.ng-pristine\": \"isPristine\", \"class.ng-dirty\": \"isDirty\", \"class.ng-valid\": \"isValid\", \"class.ng-invalid\": \"isInvalid\", \"class.ng-pending\": \"isPending\", \"class.ng-submitted\": \"isSubmitted\" } }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgControlStatusGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngGroupStatusHost\n                }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; } });\n\nconst formControlNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <input formControlName=\"firstName\">\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      firstName: new FormControl()\n  });`;\nconst formGroupNameExample = `\n  <div [formGroup]=\"myGroup\">\n      <div formGroupName=\"person\">\n        <input formControlName=\"firstName\">\n      </div>\n  </div>\n\n  In your class:\n\n  this.myGroup = new FormGroup({\n      person: new FormGroup({ firstName: new FormControl() })\n  });`;\nconst formArrayNameExample = `\n  <div [formGroup]=\"myGroup\">\n    <div formArrayName=\"cities\">\n      <div *ngFor=\"let city of cityArray.controls; index as i\">\n        <input [formControlName]=\"i\">\n      </div>\n    </div>\n  </div>\n\n  In your class:\n\n  this.cityArray = new FormArray([new FormControl('SF')]);\n  this.myGroup = new FormGroup({\n    cities: this.cityArray\n  });`;\nconst ngModelGroupExample = `\n  <form>\n      <div ngModelGroup=\"person\">\n        <input [(ngModel)]=\"person.name\" name=\"firstName\">\n      </div>\n  </form>`;\nconst ngModelWithFormGroupExample = `\n  <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n      <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n  </div>\n`;\n\nfunction controlParentException() {\n    return new ɵRuntimeError(1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formControlNameExample}`);\n}\nfunction ngModelGroupException() {\n    return new ɵRuntimeError(1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n      that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n      Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n      ${formGroupNameExample}\n\n      Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n      ${ngModelGroupExample}`);\n}\nfunction missingFormException() {\n    return new ɵRuntimeError(1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.\n\n      Example:\n\n      ${formControlNameExample}`);\n}\nfunction groupParentException() {\n    return new ɵRuntimeError(1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n    directive and pass it an existing FormGroup instance (you can create one in your class).\n\n    Example:\n\n    ${formGroupNameExample}`);\n}\nfunction arrayParentException() {\n    return new ɵRuntimeError(1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${formArrayNameExample}`);\n}\nconst disabledAttrWarning = `\n  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n  you. We recommend using this approach to avoid 'changed after checked' errors.\n\n  Example:\n  // Specify the \\`disabled\\` property at control creation time:\n  form = new FormGroup({\n    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n    last: new FormControl('Drew', Validators.required)\n  });\n\n  // Controls can also be enabled/disabled after creation:\n  form.get('first')?.enable();\n  form.get('last')?.disable();\n`;\nconst asyncValidatorsDroppedWithOptsWarning = `\n  It looks like you're constructing using a FormControl with both an options argument and an\n  async validators argument. Mixing these arguments will cause your async validators to be dropped.\n  You should either put all your validators in the options object, or in separate validators\n  arguments. For example:\n\n  // Using validators arguments\n  fc = new FormControl(42, Validators.required, myAsyncValidator);\n\n  // Using AbstractControlOptions\n  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});\n\n  // Do NOT mix them: async validators will be dropped!\n  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);\n`;\nfunction ngModelWarning(directiveName) {\n    return `\n  It looks like you're using ngModel on the same form field as ${directiveName}.\n  Support for using the ngModel input property and ngModelChange event with\n  reactive form directives has been deprecated in Angular v6 and will be removed\n  in a future version of Angular.\n\n  For more information on this, see our API docs here:\n  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel\n  `;\n}\nfunction describeKey(isFormGroup, key) {\n    return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;\n}\nfunction noControlsError(isFormGroup) {\n    return `\n    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,\n    you may want to check next tick (e.g. use setTimeout).\n  `;\n}\nfunction missingControlError(isFormGroup, key) {\n    return `Cannot find form control ${describeKey(isFormGroup, key)}`;\n}\nfunction missingControlValueError(isFormGroup, key) {\n    return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;\n}\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n/**\n * Reports that a control is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n */\nconst VALID = 'VALID';\n/**\n * Reports that a control is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a control is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a control is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n */\nconst DISABLED = 'DISABLED';\n/**\n * Gets validators from either an options object or given validators.\n */\nfunction pickValidators(validatorOrOpts) {\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;\n}\n/**\n * Creates validator function by combining provided validators.\n */\nfunction coerceToValidator(validator) {\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * Gets async validators from either an options object or given validators.\n */\nfunction pickAsyncValidators(asyncValidator, validatorOrOpts) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (isOptionsObj(validatorOrOpts) && asyncValidator) {\n            console.warn(asyncValidatorsDroppedWithOptsWarning);\n        }\n    }\n    return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;\n}\n/**\n * Creates async validator function by combining provided async validators.\n */\nfunction coerceToAsyncValidator(asyncValidator) {\n    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n        asyncValidator || null;\n}\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\nfunction assertControlPresent(parent, isGroup, key) {\n    const controls = parent.controls;\n    const collection = isGroup ? Object.keys(controls) : controls;\n    if (!collection.length) {\n        throw new ɵRuntimeError(1000 /* RuntimeErrorCode.NO_CONTROLS */, NG_DEV_MODE ? noControlsError(isGroup) : '');\n    }\n    if (!controls[key]) {\n        throw new ɵRuntimeError(1001 /* RuntimeErrorCode.MISSING_CONTROL */, NG_DEV_MODE ? missingControlError(isGroup, key) : '');\n    }\n}\nfunction assertAllValuesPresent(control, isGroup, value) {\n    control._forEachChild((_, key) => {\n        if (value[key] === undefined) {\n            throw new ɵRuntimeError(1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, NG_DEV_MODE ? missingControlValueError(isGroup, key) : '');\n        }\n    });\n}\n// clang-format on\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * The first type parameter TValue represents the value type of the control (`control.value`).\n * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * @publicApi\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param validators The function or array of functions that is used to determine the validity of\n     *     this control synchronously.\n     * @param asyncValidators The function or array of functions that is used to determine validity of\n     *     this control asynchronously.\n     */\n    constructor(validators, asyncValidators) {\n        /** @internal */\n        this._pendingDirty = false;\n        /**\n         * Indicates that a control has its own pending asynchronous validation in progress.\n         *\n         * @internal\n         */\n        this._hasOwnPendingAsyncValidator = false;\n        /** @internal */\n        this._pendingTouched = false;\n        /** @internal */\n        this._onCollectionChange = () => { };\n        this._parent = null;\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /** @internal */\n        this._onDisabledChange = [];\n        this._assignValidators(validators);\n        this._assignAsyncValidators(asyncValidators);\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control synchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get validator() {\n        return this._composedValidatorFn;\n    }\n    set validator(validatorFn) {\n        this._rawValidators = this._composedValidatorFn = validatorFn;\n    }\n    /**\n     * Returns the function that is used to determine the validity of this control asynchronously.\n     * If multiple validators have been added, this will be a single composed function.\n     * See `Validators.compose()` for additional information.\n     */\n    get asyncValidator() {\n        return this._composedAsyncValidatorFn;\n    }\n    set asyncValidator(asyncValidatorFn) {\n        this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;\n    }\n    /**\n     * The parent control.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() {\n        return this.status === VALID;\n    }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() {\n        return this.status === INVALID;\n    }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() {\n        return this.status == PENDING;\n    }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @returns True if the control is disabled, false otherwise.\n     */\n    get disabled() {\n        return this.status === DISABLED;\n    }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @returns True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     */\n    get enabled() {\n        return this.status !== DISABLED;\n    }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() {\n        return !this.pristine;\n    }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     */\n    get untouched() {\n        return !this.touched;\n    }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing synchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addValidators()` method instead.\n     */\n    setValidators(validators) {\n        this._assignValidators(validators);\n    }\n    /**\n     * Sets the asynchronous validators that are active on this control. Calling this\n     * overwrites any existing asynchronous validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * If you want to add a new validator without affecting existing ones, consider\n     * using `addAsyncValidators()` method instead.\n     */\n    setAsyncValidators(validators) {\n        this._assignAsyncValidators(validators);\n    }\n    /**\n     * Add a synchronous validator or validators to this control, without affecting other validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect. If duplicate validator functions\n     * are present in the `validators` array, only the first instance would be added to a form\n     * control.\n     *\n     * @param validators The new validator function or functions to add to this control.\n     */\n    addValidators(validators) {\n        this.setValidators(addValidators(validators, this._rawValidators));\n    }\n    /**\n     * Add an asynchronous validator or validators to this control, without affecting other\n     * validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * Adding a validator that already exists will have no effect.\n     *\n     * @param validators The new asynchronous validator function or functions to add to this control.\n     */\n    addAsyncValidators(validators) {\n        this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Remove a synchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found,\n     * it is ignored.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<string | null>('', Validators.required);\n     * ctrl.removeValidators(Validators.required);\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<string | null>('', minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     *\n     * ctrl.removeValidators(minValidator);\n     * ```\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The validator or validators to remove.\n     */\n    removeValidators(validators) {\n        this.setValidators(removeValidators(validators, this._rawValidators));\n    }\n    /**\n     * Remove an asynchronous validator from this control, without affecting other validators.\n     * Validators are compared by function reference; you must pass a reference to the exact same\n     * validator function as the one that was originally set. If a provided validator is not found, it\n     * is ignored.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param validators The asynchronous validator or validators to remove.\n     */\n    removeAsyncValidators(validators) {\n        this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));\n    }\n    /**\n     * Check whether a synchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @usageNotes\n     *\n     * ### Reference to a ValidatorFn\n     *\n     * ```\n     * // Reference to the RequiredValidator\n     * const ctrl = new FormControl<number | null>(0, Validators.required);\n     * expect(ctrl.hasValidator(Validators.required)).toEqual(true)\n     *\n     * // Reference to anonymous function inside MinValidator\n     * const minValidator = Validators.min(3);\n     * const ctrl = new FormControl<number | null>(0, minValidator);\n     * expect(ctrl.hasValidator(minValidator)).toEqual(true)\n     * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)\n     * ```\n     *\n     * @param validator The validator to check for presence. Compared by function reference.\n     * @returns Whether the provided validator was found on this control.\n     */\n    hasValidator(validator) {\n        return hasValidator(this._rawValidators, validator);\n    }\n    /**\n     * Check whether an asynchronous validator function is present on this control. The provided\n     * validator must be a reference to the exact same function that was provided.\n     *\n     * @param validator The asynchronous validator to check for presence. Compared by function\n     *     reference.\n     * @returns Whether the provided asynchronous validator was found on this control.\n     */\n    hasAsyncValidator(validator) {\n        return hasValidator(this._rawAsyncValidators, validator);\n    }\n    /**\n     * Empties out the synchronous validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearValidators() {\n        this.validator = null;\n    }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     */\n    clearAsyncValidators() {\n        this.asyncValidator = null;\n    }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsTouched(opts = {}) {\n        this.touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see `markAsTouched()`\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((control) => control.markAllAsTouched());\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsDirty()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsUntouched(opts = {}) {\n        this.touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => {\n            control.markAsUntouched({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsPristine()`\n     *\n     * @param opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsDirty(opts = {}) {\n        this.pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()`\n     * @see `markAsUntouched()`\n     * @see `markAsDirty()`\n     *\n     * @param opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     */\n    markAsPristine(opts = {}) {\n        this.pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => {\n            control.markAsPristine({ onlySelf: true });\n        });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     */\n    markAsPending(opts = {}) {\n        this.status = PENDING;\n        if (opts.emitEvent !== false) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = DISABLED;\n        this.errors = null;\n        this._forEachChild((control) => {\n            control.disable({ ...opts, onlySelf: true });\n        });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        this._updateAncestors({ ...opts, skipPristineCheck });\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {@link AbstractControl.status}\n     *\n     * @param opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        this.status = VALID;\n        this._forEachChild((control) => {\n            control.enable({ ...opts, onlySelf: true });\n        });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors({ ...opts, skipPristineCheck });\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * Sets the parent of the control\n     *\n     * @param parent The new parent.\n     */\n    setParent(parent) {\n        this._parent = parent;\n    }\n    /**\n     * The raw value of this control. For most control implementations, the raw value will include\n     * disabled children.\n     */\n    getRawValue() {\n        return this.value;\n    }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            this.errors = this._runValidator();\n            this.status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            this.valueChanges.emit(this.value);\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /** @internal */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    _setInitialStatus() {\n        this.status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            this.status = PENDING;\n            this._hasOwnPendingAsyncValidator = true;\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription = obs.subscribe((errors) => {\n                this._hasOwnPendingAsyncValidator = false;\n                // This will trigger the recalculation of the validation status, which depends on\n                // the state of the asynchronous validation (whether it is in progress or not). So, it is\n                // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.\n                this.setErrors(errors, { emitEvent });\n            });\n        }\n    }\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n            this._hasOwnPendingAsyncValidator = false;\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * @param opts Configuration options that determine how the control propagates\n     * changes and emits events after the control errors are set.\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event after the errors are set.\n     *\n     * @usageNotes\n     *\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    setErrors(errors, opts = {}) {\n        this.errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * @param path A dot-delimited string or array of string/number values that define the path to the\n     * control. If a string is provided, passing it as a string literal will result in improved type\n     * information. Likewise, if an array is provided, passing it `as const` will cause improved type\n     * information to be available.\n     *\n     * @usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings\n     *\n     * ### Retrieve a control in a FormArray\n     *\n     * When accessing an element inside a FormArray, you can use an element index.\n     * For example, to get a `price` control from the first element in an `items` array you can use:\n     *\n     * * `this.form.get('items.0.price');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['items', 0, 'price']);`\n     */\n    get(path) {\n        let currPath = path;\n        if (currPath == null)\n            return null;\n        if (!Array.isArray(currPath))\n            currPath = currPath.split('.');\n        if (currPath.length === 0)\n            return null;\n        return currPath.reduce((control, name) => control && control._find(name), this);\n    }\n    /**\n     * @description\n     * Reports error data for the control with the given path.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @returns error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * @description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * @param errorCode The code of the error to check\n     * @param path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @returns whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     */\n    get root() {\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /** @internal */\n    _updateControlsErrors(emitEvent) {\n        this.status = this._calculateStatus();\n        if (emitEvent) {\n            this.statusChanges.emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /** @internal */\n    _initObservables() {\n        this.valueChanges = new EventEmitter();\n        this.statusChanges = new EventEmitter();\n    }\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /** @internal */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /** @internal */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /** @internal */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /** @internal */\n    _updatePristine(opts = {}) {\n        this.pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /** @internal */\n    _updateTouched(opts = {}) {\n        this.touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /** @internal */\n    _registerOnCollectionChange(fn) {\n        this._onCollectionChange = fn;\n    }\n    /** @internal */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && opts.updateOn != null) {\n            this._updateOn = opts.updateOn;\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * @internal\n     */\n    _parentMarkedDirty(onlySelf) {\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();\n    }\n    /** @internal */\n    _find(name) {\n        return null;\n    }\n    /**\n     * Internal implementation of the `setValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignValidators(validators) {\n        this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedValidatorFn = coerceToValidator(this._rawValidators);\n    }\n    /**\n     * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a\n     * different method, because it is called in the constructor and it can break cases where\n     * a control is extended.\n     */\n    _assignAsyncValidators(validators) {\n        this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;\n        this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);\n    }\n}\n\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormArray`, and `FormRecord`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * `FormGroup` is intended for use cases where the keys are known ahead of time.\n * If you need to dynamically add and remove controls, use {@link FormRecord} instead.\n *\n * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner\n * control types as values.\n *\n * @usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### The type argument, and optional controls\n *\n * `FormGroup` accepts one generic argument, which is an object containing its inner controls.\n * This type will usually be inferred automatically, but you can always specify it explicitly if you\n * wish.\n *\n * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the\n * type):\n *\n * ```\n * const form = new FormGroup<{\n *   first: FormControl<string|null>,\n *   middle?: FormControl<string|null>, // Middle name is optional.\n *   last: FormControl<string|null>,\n * }>({\n *   first: new FormControl('Nancy'),\n *   last: new FormControl('Drew'),\n * });\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * ### Using a FormGroup with optional controls\n *\n * It is possible to have optional controls in a FormGroup. An optional control can be removed later\n * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be\n * declared optional in the group's type.\n *\n * ```ts\n * const c = new FormGroup<{one?: FormControl<string>}>({\n *   one: new FormControl('')\n * });\n * ```\n *\n * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`\n * without providing the optional key `one` will cause it to become `null`.\n *\n * @publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,\n            // so we set `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n    }\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    addControl(name, control, options = {}) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group. In a strongly-typed group, required controls cannot be\n     * removed.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param name The control name to remove from the collection\n     * @param options Specifies whether this FormGroup instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeControl(name, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    setControl(name, control, options = {}) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * @usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param value The new value for the control that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, true, value);\n        Object.keys(value).forEach(name => {\n            assertControlPresent(this, true, name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param value The object that matches the structure of the group.\n     * @param options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control value\n     * is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values, so\n        // we just ignore such cases when a field containing FormGroup instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        Object.keys(value).forEach(name => {\n            // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so\n            // `as any` is required.\n            const control = this.controls[name];\n            if (control) {\n                control.patchValue(\n                /* Guaranteed to be present, due to the outer forEach. */ value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets\n     * the value of all descendants to their default values, or null if no defaults were provided.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * @param value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(form.value);  // {last: 'last'}\n     * console.log(form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control.getRawValue();\n            return acc;\n        });\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(key => {\n            // The list of controls can change (for ex. controls might be removed) while the loop\n            // is running (as a result of invoking Forms API in `valueChanges` subscription), so we\n            // have to null check before invoking the callback.\n            const control = this.controls[key];\n            control && cb(control, key);\n        });\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value = this._reduceValue();\n    }\n    /** @internal */\n    _anyControls(condition) {\n        for (const [controlName, control] of Object.entries(this.controls)) {\n            if (this.contains(controlName) && condition(control)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** @internal */\n    _reduceValue() {\n        let acc = {};\n        return this._reduceChildren(acc, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /** @internal */\n    _reduceChildren(initValue, fn) {\n        let res = initValue;\n        this._forEachChild((control, name) => {\n            res = fn(res, control, name);\n        });\n        return res;\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /** @internal */\n    _find(name) {\n        return this.controls.hasOwnProperty(name) ?\n            this.controls[name] :\n            null;\n    }\n}\nconst UntypedFormGroup = FormGroup;\n/**\n * @description\n * Asserts that the given control is an instance of `FormGroup`\n *\n * @publicApi\n */\nconst isFormGroup = (control) => control instanceof FormGroup;\n/**\n * Tracks the value and validity state of a collection of `FormControl` instances, each of which has\n * the same value type.\n *\n * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,\n * with controls added and removed as needed.\n *\n * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.\n *\n * @usageNotes\n *\n * ```\n * let numbers = new FormRecord({bill: new FormControl('415-123-456')});\n * numbers.addControl('bob', new FormControl('415-234-567'));\n * numbers.removeControl('bill');\n * ```\n *\n * @publicApi\n */\nclass FormRecord extends FormGroup {\n}\n/**\n * @description\n * Asserts that the given control is an instance of `FormRecord`\n *\n * @publicApi\n */\nconst isFormRecord = (control) => control instanceof FormRecord;\n\n/**\n * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of\n * whether the control is disabled or enabled.\n *\n * @see `FormsModule.withConfig`\n */\nconst CALL_SET_DISABLED_STATE = new InjectionToken('CallSetDisabledState', { providedIn: 'root', factory: () => setDisabledStateDefault });\n/**\n * Whether to use the fixed setDisabledState behavior by default.\n */\nconst setDisabledStateDefault = 'always';\nfunction controlPath(name, parent) {\n    return [...parent.path, name];\n}\n/**\n * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both\n * instances. This function is typically invoked when form directive is being initialized.\n *\n * @param control Form control instance that should be linked.\n * @param dir Directive that should be linked with a given control.\n */\nfunction setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!control)\n            _throwError(dir, 'Cannot find control with');\n        if (!dir.valueAccessor)\n            _throwMissingValueAccessorError(dir);\n    }\n    setUpValidators(control, dir);\n    dir.valueAccessor.writeValue(control.value);\n    // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.\n    // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and\n    // the method is always called.\n    if (control.disabled || callSetDisabledState === 'always') {\n        dir.valueAccessor.setDisabledState?.(control.disabled);\n    }\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    setUpDisabledChangeHandler(control, dir);\n}\n/**\n * Reverts configuration performed by the `setUpControl` control function.\n * Effectively disconnects form control with a given form directive.\n * This function is typically invoked when corresponding form directive is being destroyed.\n *\n * @param control Form control which should be cleaned up.\n * @param dir Directive that should be disconnected from a given control.\n * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should\n *     contain asserts to verify that it's not called once directive is destroyed. We need this flag\n *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.\n */\nfunction cleanUpControl(control, dir, validateControlPresenceOnChange = true) {\n    const noop = () => {\n        if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            _noControlError(dir);\n        }\n    };\n    // The `valueAccessor` field is typically defined on FromControl and FormControlName directive\n    // instances and there is a logic in `selectValueAccessor` function that throws if it's not the\n    // case. We still check the presence of `valueAccessor` before invoking its methods to make sure\n    // that cleanup works correctly if app code or tests are setup to ignore the error thrown from\n    // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.\n    if (dir.valueAccessor) {\n        dir.valueAccessor.registerOnChange(noop);\n        dir.valueAccessor.registerOnTouched(noop);\n    }\n    cleanUpValidators(control, dir);\n    if (control) {\n        dir._invokeOnDestroyCallbacks();\n        control._registerOnCollectionChange(() => { });\n    }\n}\nfunction registerOnValidatorChange(validators, onChange) {\n    validators.forEach((validator) => {\n        if (validator.registerOnValidatorChange)\n            validator.registerOnValidatorChange(onChange);\n    });\n}\n/**\n * Sets up disabled change handler function on a given form control if ControlValueAccessor\n * associated with a given directive instance supports the `setDisabledState` call.\n *\n * @param control Form control where disabled change handler should be setup.\n * @param dir Corresponding directive instance associated with this control.\n */\nfunction setUpDisabledChangeHandler(control, dir) {\n    if (dir.valueAccessor.setDisabledState) {\n        const onDisabledChange = (isDisabled) => {\n            dir.valueAccessor.setDisabledState(isDisabled);\n        };\n        control.registerOnDisabledChange(onDisabledChange);\n        // Register a callback function to cleanup disabled change handler\n        // from a control instance when a directive is destroyed.\n        dir._registerOnDestroy(() => {\n            control._unregisterOnDisabledChange(onDisabledChange);\n        });\n    }\n}\n/**\n * Sets up sync and async directive validators on provided form control.\n * This function merges validators from the directive into the validators of the control.\n *\n * @param control Form control where directive validators should be setup.\n * @param dir Directive instance that contains validators to be setup.\n */\nfunction setUpValidators(control, dir) {\n    const validators = getControlValidators(control);\n    if (dir.validator !== null) {\n        control.setValidators(mergeValidators(validators, dir.validator));\n    }\n    else if (typeof validators === 'function') {\n        // If sync validators are represented by a single validator function, we force the\n        // `Validators.compose` call to happen by executing the `setValidators` function with\n        // an array that contains that function. We need this to avoid possible discrepancies in\n        // validators behavior, so sync validators are always processed by the `Validators.compose`.\n        // Note: we should consider moving this logic inside the `setValidators` function itself, so we\n        // have consistent behavior on AbstractControl API level. The same applies to the async\n        // validators logic below.\n        control.setValidators([validators]);\n    }\n    const asyncValidators = getControlAsyncValidators(control);\n    if (dir.asyncValidator !== null) {\n        control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));\n    }\n    else if (typeof asyncValidators === 'function') {\n        control.setAsyncValidators([asyncValidators]);\n    }\n    // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    const onValidatorChange = () => control.updateValueAndValidity();\n    registerOnValidatorChange(dir._rawValidators, onValidatorChange);\n    registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);\n}\n/**\n * Cleans up sync and async directive validators on provided form control.\n * This function reverts the setup performed by the `setUpValidators` function, i.e.\n * removes directive-specific validators from a given control instance.\n *\n * @param control Form control from where directive validators should be removed.\n * @param dir Directive instance that contains validators to be removed.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpValidators(control, dir) {\n    let isControlUpdated = false;\n    if (control !== null) {\n        if (dir.validator !== null) {\n            const validators = getControlValidators(control);\n            if (Array.isArray(validators) && validators.length > 0) {\n                // Filter out directive validator function.\n                const updatedValidators = validators.filter((validator) => validator !== dir.validator);\n                if (updatedValidators.length !== validators.length) {\n                    isControlUpdated = true;\n                    control.setValidators(updatedValidators);\n                }\n            }\n        }\n        if (dir.asyncValidator !== null) {\n            const asyncValidators = getControlAsyncValidators(control);\n            if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {\n                // Filter out directive async validator function.\n                const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);\n                if (updatedAsyncValidators.length !== asyncValidators.length) {\n                    isControlUpdated = true;\n                    control.setAsyncValidators(updatedAsyncValidators);\n                }\n            }\n        }\n    }\n    // Clear onValidatorChange callbacks by providing a noop function.\n    const noop = () => { };\n    registerOnValidatorChange(dir._rawValidators, noop);\n    registerOnValidatorChange(dir._rawAsyncValidators, noop);\n    return isControlUpdated;\n}\nfunction setUpViewChangePipeline(control, dir) {\n    dir.valueAccessor.registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\nfunction setUpBlurPipeline(control, dir) {\n    dir.valueAccessor.registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\nfunction setUpModelChangePipeline(control, dir) {\n    const onChange = (newValue, emitModelEvent) => {\n        // control -> view\n        dir.valueAccessor.writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    };\n    control.registerOnChange(onChange);\n    // Register a callback function to cleanup onChange handler\n    // from a control instance when a directive is destroyed.\n    dir._registerOnDestroy(() => {\n        control._unregisterOnChange(onChange);\n    });\n}\n/**\n * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators\n * present in the view.\n *\n * @param control FormGroup or FormArray instance that should be linked.\n * @param dir Directive that provides view validators.\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwError(dir, 'Cannot find control with');\n    setUpValidators(control, dir);\n}\n/**\n * Reverts the setup performed by the `setUpFormContainer` function.\n *\n * @param control FormGroup or FormArray instance that should be cleaned up.\n * @param dir Directive that provided view validators.\n * @returns true if a control was updated as a result of this action.\n */\nfunction cleanUpFormContainer(control, dir) {\n    return cleanUpValidators(control, dir);\n}\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\nfunction _throwError(dir, message) {\n    const messageEnd = _describeControlLocation(dir);\n    throw new Error(`${message} ${messageEnd}`);\n}\nfunction _describeControlLocation(dir) {\n    const path = dir.path;\n    if (path && path.length > 1)\n        return `path: '${path.join(' -> ')}'`;\n    if (path?.[0])\n        return `name: '${path}'`;\n    return 'unspecified name attribute';\n}\nfunction _throwMissingValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);\n}\nfunction _throwInvalidValueAccessorError(dir) {\n    const loc = _describeControlLocation(dir);\n    throw new ɵRuntimeError(1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` +\n        `Check that the \\`NG_VALUE_ACCESSOR\\` token is configured as a \\`multi: true\\` provider.`);\n}\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object.is(viewModel, change.currentValue);\n}\nfunction isBuiltInAccessor(valueAccessor) {\n    // Check if a given value accessor is an instance of a class that directly extends\n    // `BuiltInControlValueAccessor` one.\n    return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;\n}\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach((dir) => {\n        const control = dir.control;\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode))\n        _throwInvalidValueAccessorError(dir);\n    let defaultAccessor = undefined;\n    let builtinAccessor = undefined;\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode))\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _throwError(dir, 'No valid value accessor for form control with');\n    }\n    return null;\n}\nfunction removeListItem$1(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        console.warn(ngModelWarning(name));\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\nconst resolvedPromise$1 = (() => Promise.resolve())();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgForm extends ControlContainer {\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /**\n         * @description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = new Set();\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @nodoc */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control =\n                container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir, this.callSetDisabledState);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.add(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            this._directives.delete(dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise$1.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise$1.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        // Forms with `method=\"dialog\"` have some special behavior\n        // that won't reload the page and that shouldn't be prevented.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n}\nNgForm.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgForm, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgForm.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgForm, selector: \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider$1], exportAs: [\"ngForm\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgForm, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { options: [{\n                type: Input,\n                args: ['ngFormOptions']\n            }] } });\n\nfunction removeListItem(list, el) {\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\nfunction isFormControlState(formState) {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n}\nconst FormControl = (class FormControl extends AbstractControl {\n    constructor(\n    // formState and defaultValue will only be null if T is nullable\n    formState = null, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        /** @publicApi */\n        this.defaultValue = null;\n        /** @internal */\n        this._onChange = [];\n        /** @internal */\n        this._pendingChange = false;\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this._initObservables();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set\n            // `emitEvent` to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n        if (isOptionsObj(validatorOrOpts) &&\n            (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {\n            if (isFormControlState(formState)) {\n                this.defaultValue = formState.value;\n            }\n            else {\n                this.defaultValue = formState;\n            }\n        }\n    }\n    setValue(value, options = {}) {\n        this.value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    reset(formState = this.defaultValue, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**  @internal */\n    _updateValue() { }\n    /**  @internal */\n    _anyControls(condition) {\n        return false;\n    }\n    /**  @internal */\n    _allControlsDisabled() {\n        return this.disabled;\n    }\n    registerOnChange(fn) {\n        this._onChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnChange(fn) {\n        removeListItem(this._onChange, fn);\n    }\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /** @internal */\n    _unregisterOnDisabledChange(fn) {\n        removeListItem(this._onDisabledChange, fn);\n    }\n    /** @internal */\n    _forEachChild(cb) { }\n    /** @internal */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    _applyFormState(formState) {\n        if (isFormControlState(formState)) {\n            this.value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            this.value = this._pendingValue = formState;\n        }\n    }\n});\nconst UntypedFormControl = FormControl;\n/**\n * @description\n * Asserts that the given control is an instance of `FormControl`\n *\n * @publicApi\n */\nconst isFormControl = (control) => control instanceof FormControl;\n\n/**\n * @description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * @publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /** @nodoc */\n    ngOnInit() {\n        this._checkParentType();\n        // Register the group with its parent group.\n        this.formDirective.addFormGroup(this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            // Remove the group from its parent group.\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormGroup(this);\n    }\n    /**\n     * @description\n     * The path to this group from the top-level directive.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /** @internal */\n    _checkParentType() { }\n}\nAbstractFormGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: AbstractFormGroupDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nAbstractFormGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: AbstractFormGroupDirective, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: AbstractFormGroupDirective, decorators: [{\n            type: Directive\n        }] });\n\nfunction modelParentException() {\n    return new ɵRuntimeError(1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `\n    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n    formGroup's partner directive \"formControlName\" instead.  Example:\n\n    ${formControlNameExample}\n\n    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n    Example:\n\n    ${ngModelWithFormGroupExample}`);\n}\nfunction formGroupNameException() {\n    return new ɵRuntimeError(1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `\n    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n    Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\nfunction missingNameException() {\n    return new ɵRuntimeError(1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form\n    control must be defined as 'standalone' in ngModelOptions.\n\n    Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n    Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n}\nfunction modelGroupParentException() {\n    return new ɵRuntimeError(1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `\n    ngModelGroup cannot be used with a parent formGroup directive.\n\n    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n    ${formGroupNameExample}\n\n    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n    ${ngModelGroupExample}`);\n}\n\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgModelGroup, deps: [{ token: ControlContainer, host: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgModelGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgModelGroup, selector: \"[ngModelGroup]\", inputs: { name: [\"ngModelGroup\", \"name\"] }, providers: [modelGroupProvider], exportAs: [\"ngModelGroup\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgModelGroup, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['ngModelGroup']\n            }] } });\n\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve())();\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this.callSetDisabledState = callSetDisabledState;\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered || 'name' in changes) {\n            if (this._registered) {\n                this._checkName();\n                if (this.formDirective) {\n                    // We can't call `formDirective.removeControl(this)`, because the `name` has already been\n                    // changed. We also can't reset the name temporarily since the logic in `removeControl`\n                    // is inside a promise and it won't run immediately. We work around it by giving it an\n                    // object with the same shape instead.\n                    const oldName = changes['name'].previousValue;\n                    this.formDirective.removeControl({ name: oldName, path: this._getPath(oldName) });\n                }\n            }\n            this._setUpControl();\n        }\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._getPath(this.name);\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this, this.callSetDisabledState);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                throw modelParentException();\n            }\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        // checking for 0 to avoid breaking change\n        const isDisabled = disabledValue !== 0 && ɵcoerceToBoolean(disabledValue);\n        resolvedPromise.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n            this._changeDetectorRef?.markForCheck();\n        });\n    }\n    _getPath(controlName) {\n        return this._parent ? controlPath(controlName, this._parent) : [controlName];\n    }\n}\nNgModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgModel, deps: [{ token: ControlContainer, host: true, optional: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: ChangeDetectorRef, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgModel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding$1], exportAs: [\"ngModel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgModel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding$1],\n                    exportAs: 'ngModel'\n                }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { name: [{\n                type: Input\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], options: [{\n                type: Input,\n                args: ['ngModelOptions']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\n/**\n * @description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * @publicApi\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n */\nclass ɵNgNoValidate {\n}\nɵNgNoValidate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵNgNoValidate, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nɵNgNoValidate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\", host: { attributes: { \"novalidate\": \"\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵNgNoValidate, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                }]\n        }] });\n\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NumberValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        const normalizedValue = value == null ? '' : value;\n        this.setProperty('value', normalizedValue);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n}\nNumberValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NumberValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nNumberValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NumberValueAccessor, selector: \"input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]\", host: { listeners: { \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [NUMBER_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NumberValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                }]\n        }] });\n\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\nfunction throwNameError() {\n    throw new ɵRuntimeError(1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n}\n/**\n * Internal-only NgModule that works as a host for the `RadioControlRegistry` tree-shakable\n * provider. Note: the `InternalFormsSharedModule` can not be used here directly, since it's\n * declared *after* the `RadioControlRegistry` class and the `providedIn` doesn't support\n * `forwardRef` logic.\n */\nclass RadioControlRegistryModule {\n}\nRadioControlRegistryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRadioControlRegistryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistryModule });\nRadioControlRegistryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistryModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistryModule, decorators: [{\n            type: NgModule\n        }] });\n/**\n * @description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * @description\n     * Adds a control to the internal registry. For internal use only.\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * @description\n     * Removes a control from the internal registry. For internal use only.\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * @description\n     * Selects a radio button. For internal use only.\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRadioControlRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistry, providedIn: RadioControlRegistryModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: RadioControlRegistryModule }]\n        }] });\n/**\n * @description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RadioControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor(renderer, elementRef, _registry, _injector) {\n        super(renderer, elementRef);\n        this._registry = _registry;\n        this._injector = _injector;\n        this.setDisabledStateFired = false;\n        /**\n         * The registered callback function called when a change event occurs on the input element.\n         * Note: we declare `onChange` here (also used as host listener) as a function with no arguments\n         * to override the `onChange` function (which expects 1 argument) in the parent\n         * `BaseControlValueAccessor` class.\n         * @nodoc\n         */\n        this.onChange = () => { };\n        this.callSetDisabledState = inject(CALL_SET_DISABLED_STATE, { optional: true }) ?? setDisabledStateDefault;\n    }\n    /** @nodoc */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._registry.remove(this);\n    }\n    /**\n     * Sets the \"checked\" property value on the radio input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this.setProperty('checked', this._state);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /** @nodoc */\n    setDisabledState(isDisabled) {\n        /**\n         * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,\n         * including upon control creation. However, a longstanding bug caused the method to not fire\n         * when an *enabled* control was attached. This bug was fixed in v15 in #47576.\n         *\n         * This had a side effect: previously, it was possible to instantiate a reactive form control\n         * with `[attr.disabled]=true`, even though the the corresponding control was enabled in the\n         * model. This resulted in a mismatch between the model and the DOM. Now, because\n         * `setDisabledState` is always called, the value in the DOM will be immediately overwritten\n         * with the \"correct\" enabled value.\n         *\n         * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms\n         * models the entire group of radio buttons as a single `FormControl`, there is no way to\n         * control the disabled state for individual radios, so they can no longer be configured as\n         * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`\n         * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`\n         * is `false`, and we are not in legacy mode.\n         */\n        if (this.setDisabledStateFired || isDisabled ||\n            this.callSetDisabledState === 'whenDisabledForLegacyCode') {\n            this.setProperty('disabled', isDisabled);\n        }\n        this.setDisabledStateFired = true;\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param value\n     */\n    fireUncheck(value) {\n        this.writeValue(value);\n    }\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n}\nRadioControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: RadioControlRegistry }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Directive });\nRadioControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: RadioControlValueAccessor, selector: \"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]\", inputs: { name: \"name\", formControlName: \"formControlName\", value: \"value\" }, host: { listeners: { \"change\": \"onChange()\", \"blur\": \"onTouched()\" } }, providers: [RADIO_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RadioControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: RadioControlRegistry }, { type: i0.Injector }]; }, propDecorators: { name: [{\n                type: Input\n            }], formControlName: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * @description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * @usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass RangeValueAccessor extends BuiltInControlValueAccessor {\n    /**\n     * Sets the \"value\" property on the input element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.setProperty('value', parseFloat(value));\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => {\n            fn(value == '' ? null : parseFloat(value));\n        };\n    }\n}\nRangeValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RangeValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nRangeValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: RangeValueAccessor, selector: \"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]\", host: { listeners: { \"change\": \"onChange($event.target.value)\", \"input\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [RANGE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RangeValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                }]\n        }] });\n\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this.callSetDisabledState = callSetDisabledState;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            const previousForm = changes['form'].previousValue;\n            if (previousForm) {\n                cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */ false);\n            }\n            setUpControl(this.form, this, this.callSetDisabledState);\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            }\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpControl(this.form, this, /* validateControlPresenceOnChange */ false);\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormControlDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nFormControlDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: FormControlDirective, selector: \"[formControl]\", inputs: { form: [\"formControl\", \"form\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [formControlBinding], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormControlDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { form: [{\n                type: Input,\n                args: ['formControl']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    constructor(validators, asyncValidators, callSetDisabledState) {\n        super();\n        this.callSetDisabledState = callSetDisabledState;\n        /**\n         * @description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * Callback that should be invoked when controls in FormGroup or FormArray collection change\n         * (added or removed). This callback triggers corresponding DOM updates.\n         */\n        this._onCollectionChange = () => this._updateDomValue();\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n            this._oldForm = this.form;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpValidators(this.form, this);\n            // Currently the `onCollectionChange` callback is rewritten each time the\n            // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n            // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n            // Otherwise it might cause overriding a callback of some other directive instances. We should\n            // consider updating this logic later to make it similar to how `onChange` callbacks are\n            // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n            if (this.form._onCollectionChange === this._onCollectionChange) {\n                this.form._registerOnCollectionChange(() => { });\n            }\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir, this.callSetDisabledState);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */ false);\n        removeListItem$1(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        // Forms with `method=\"dialog\"` have some special behavior that won't reload the page and that\n        // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because\n        // some internal apps call this method directly with the wrong arguments.\n        return $event?.target?.method === 'dialog';\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            const oldCtrl = dir.control;\n            const newCtrl = this.form.get(dir.path);\n            if (oldCtrl !== newCtrl) {\n                // Note: the value of the `dir.control` may not be defined, for example when it's a first\n                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n                cleanUpControl(oldCtrl || null, dir);\n                // Check whether new control at the same location inside the corresponding `FormGroup` is an\n                // instance of `FormControl` and perform control setup only if that's the case.\n                // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n                // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n                // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n                if (isFormControl(newCtrl)) {\n                    setUpControl(newCtrl, dir, this.callSetDisabledState);\n                    dir.control = newCtrl;\n                }\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _setUpFormContainer(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        // NOTE: this operation looks unnecessary in case no new validators were added in\n        // `setUpFormContainer` call. Consider updating this code to match the logic in\n        // `_cleanUpFormContainer` function.\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    _cleanUpFormContainer(dir) {\n        if (this.form) {\n            const ctrl = this.form.get(dir.path);\n            if (ctrl) {\n                const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n                if (isControlUpdated) {\n                    // Run validity check only in case a control was updated (i.e. view validators were\n                    // removed) as removing view validators might cause validity to change.\n                    ctrl.updateValueAndValidity({ emitEvent: false });\n                }\n            }\n        }\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(this._onCollectionChange);\n        if (this._oldForm) {\n            this._oldForm._registerOnCollectionChange(() => { });\n        }\n    }\n    _updateValidators() {\n        setUpValidators(this.form, this);\n        if (this._oldForm) {\n            cleanUpValidators(this._oldForm, this);\n        }\n    }\n    _checkFormPresent() {\n        if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingFormException();\n        }\n    }\n}\nFormGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormGroupDirective, deps: [{ token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: CALL_SET_DISABLED_STATE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nFormGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: FormGroupDirective, selector: \"[formGroup]\", inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, host: { listeners: { \"submit\": \"onSubmit($event)\", \"reset\": \"onReset()\" } }, providers: [formDirectiveProvider], exportAs: [\"ngForm\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormGroupDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CALL_SET_DISABLED_STATE]\n                }] }]; }, propDecorators: { form: [{\n                type: Input,\n                args: ['formGroup']\n            }], ngSubmit: [{\n                type: Output\n            }] } });\n\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and\n * looks for a `FormGroup` or `FormRecord` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the `AbstractControl.get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the `AbstractControl.get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw groupParentException();\n        }\n    }\n}\nFormGroupName.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormGroupName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nFormGroupName.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: FormGroupName, selector: \"[formGroupName]\", inputs: { name: [\"formGroupName\", \"name\"] }, providers: [formGroupNameProvider], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormGroupName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formGroupName']\n            }] } });\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @nodoc\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @nodoc\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw arrayParentException();\n        }\n    }\n}\nFormArrayName.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormArrayName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });\nFormArrayName.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: FormArrayName, selector: \"[formArrayName]\", inputs: { name: [\"formArrayName\", \"name\"] }, providers: [formArrayNameProvider], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormArrayName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formArrayName']\n            }] } });\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            }\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) &&\n                !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                throw controlParentException();\n            }\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control = this.formDirective.addControl(this);\n        this._added = true;\n    }\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormControlName, deps: [{ token: ControlContainer, host: true, optional: true, skipSelf: true }, { token: NG_VALIDATORS, optional: true, self: true }, { token: NG_ASYNC_VALIDATORS, optional: true, self: true }, { token: NG_VALUE_ACCESSOR, optional: true, self: true }, { token: NG_MODEL_WITH_FORM_CONTROL_WARNING, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nFormControlName.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: FormControlName, selector: \"[formControlName]\", inputs: { name: [\"formControlName\", \"name\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, providers: [controlNameBinding], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormControlName, decorators: [{\n            type: Directive,\n            args: [{ selector: '[formControlName]', providers: [controlNameBinding] }]\n        }], ctorParameters: function () { return [{ type: ControlContainer, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_ASYNC_VALIDATORS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NG_VALUE_ACCESSOR]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['formControlName']\n            }], isDisabled: [{\n                type: Input,\n                args: ['disabled']\n            }], model: [{\n                type: Input,\n                args: ['ngModel']\n            }], update: [{\n                type: Output,\n                args: ['ngModelChange']\n            }] } });\n\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in IE, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the select element.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        const id = this._getOptionId(value);\n        const valueString = _buildValueString$1(id, value);\n        this.setProperty('value', valueString);\n    }\n    /**\n     * Registers a function called when the control value changes.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /** @internal */\n    _registerOption() {\n        return (this._idCounter++).toString();\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SelectControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nSelectControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target.value)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SelectControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass NgSelectOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgSelectOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nNgSelectOption.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: NgSelectOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NgSelectOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }]; }, propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/** Mock interface for HTMLCollection */\nclass HTMLCollection {\n}\n/**\n * @description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select\n * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this._optionMap = new Map();\n        /** @internal */\n        this._idCounter = 0;\n        this._compareWith = Object.is;\n    }\n    /**\n     * @description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw new ɵRuntimeError(1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on one or of more of the select's options.\n     * @nodoc\n     */\n    writeValue(value) {\n        this.value = value;\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(ids.indexOf(o.toString()) > -1);\n            };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => {\n                opt._setSelected(false);\n            };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     * @nodoc\n     */\n    registerOnChange(fn) {\n        this.onChange = (element) => {\n            const selected = [];\n            const selectedOptions = element.selectedOptions;\n            if (selectedOptions !== undefined) {\n                const options = selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade to use `options` when `selectedOptions` property is not available.\n            // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib\n            // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.\n            else {\n                const options = element.options;\n                for (let i = 0; i < options.length; i++) {\n                    const opt = options[i];\n                    if (opt.selected) {\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /** @internal */\n    _registerOption(value) {\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /** @internal */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id)._value, value))\n                return id;\n        }\n        return null;\n    }\n    /** @internal */\n    _getOptionValue(valueString) {\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SelectMultipleControlValueAccessor, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nSelectMultipleControlValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: SelectMultipleControlValueAccessor, selector: \"select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]\", inputs: { compareWith: \"compareWith\" }, host: { listeners: { \"change\": \"onChange($event.target)\", \"blur\": \"onTouched()\" } }, providers: [SELECT_MULTIPLE_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SelectMultipleControlValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                }]\n        }], propDecorators: { compareWith: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass ɵNgSelectMultipleOption {\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * @description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * @description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /** @internal */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /** @internal */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nɵNgSelectMultipleOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵNgSelectMultipleOption, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: SelectMultipleControlValueAccessor, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nɵNgSelectMultipleOption.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: ɵNgSelectMultipleOption, selector: \"option\", inputs: { ngValue: \"ngValue\", value: \"value\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵNgSelectMultipleOption, decorators: [{\n            type: Directive,\n            args: [{ selector: 'option' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: SelectMultipleControlValueAccessor, decorators: [{\n                    type: Optional\n                }, {\n                    type: Host\n                }] }]; }, propDecorators: { ngValue: [{\n                type: Input,\n                args: ['ngValue']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }] } });\n\n/**\n * Method that updates string to integer if not already a number\n *\n * @param value The value to convert to integer.\n * @returns value of parameter converted to number or integer.\n */\nfunction toInteger(value) {\n    return typeof value === 'number' ? value : parseInt(value, 10);\n}\n/**\n * Method that ensures that provided value is a float (and converts it to float if needed).\n *\n * @param value The value to convert to float.\n * @returns value of parameter converted to number or float.\n */\nfunction toFloat(value) {\n    return typeof value === 'number' ? value : parseFloat(value);\n}\n/**\n * A base class for Validator-based Directives. The class contains common logic shared across such\n * Directives.\n *\n * For internal use only, this class is not intended for use outside of the Forms package.\n */\nclass AbstractValidatorDirective {\n    constructor() {\n        this._validator = nullValidator;\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this.inputName in changes) {\n            const input = this.normalizeInput(changes[this.inputName].currentValue);\n            this._enabled = this.enabled(input);\n            this._validator = this._enabled ? this.createValidator(input) : nullValidator;\n            if (this._onChange) {\n                this._onChange();\n            }\n        }\n    }\n    /** @nodoc */\n    validate(control) {\n        return this._validator(control);\n    }\n    /** @nodoc */\n    registerOnValidatorChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * @description\n     * Determines whether this validator should be active or not based on an input.\n     * Base class implementation checks whether an input is defined (if the value is different from\n     * `null` and `undefined`). Validator classes that extend this base class can override this\n     * function with the logic specific to a particular validator directive.\n     */\n    enabled(input) {\n        return input != null /* both `null` and `undefined` */;\n    }\n}\nAbstractValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: AbstractValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nAbstractValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: AbstractValidatorDirective, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: AbstractValidatorDirective, decorators: [{\n            type: Directive\n        }] });\n/**\n * @description\n * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `max` attribute.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a max validator\n *\n * The following example shows how to add a max validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel max=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'max';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (max) => maxValidator(max);\n    }\n}\nMaxValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MaxValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMaxValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: MaxValidator, selector: \"input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]\", inputs: { max: \"max\" }, host: { properties: { \"attr.max\": \"_enabled ? max : null\" } }, providers: [MAX_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MaxValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]',\n                    providers: [MAX_VALIDATOR],\n                    host: { '[attr.max]': '_enabled ? max : null' }\n                }]\n        }], propDecorators: { max: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a min validator\n *\n * The following example shows how to add a min validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input type=\"number\" ngModel min=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'min';\n        /** @internal */\n        this.normalizeInput = (input) => toFloat(input);\n        /** @internal */\n        this.createValidator = (min) => minValidator(min);\n    }\n}\nMinValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MinValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMinValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: MinValidator, selector: \"input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]\", inputs: { min: \"min\" }, host: { properties: { \"attr.min\": \"_enabled ? min : null\" } }, providers: [MIN_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MinValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]',\n                    providers: [MIN_VALIDATOR],\n                    host: { '[attr.min]': '_enabled ? min : null' }\n                }]\n        }], propDecorators: { min: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * @description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nclass RequiredValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'required';\n        /** @internal */\n        this.normalizeInput = ɵcoerceToBoolean;\n        /** @internal */\n        this.createValidator = (input) => requiredValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n}\nRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: { required: \"required\" }, host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: RequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' }\n                }]\n        }], propDecorators: { required: [{\n                type: Input\n            }] } });\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an\n * ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.createValidator = (input) => requiredTrueValidator;\n    }\n}\nCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: CheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\", host: { properties: { \"attr.required\": \"_enabled ? \\\"\\\" : null\" } }, providers: [CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: CheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': '_enabled ? \"\" : null' }\n                }]\n        }] });\n/**\n * @description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * The email validation is based on the WHATWG HTML specification with some enhancements to\n * incorporate more RFC rules. More information can be found on the [Validators.email\n * page](api/forms/Validators#email).\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel\n * binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * @publicApi\n * @ngModule FormsModule\n * @ngModule ReactiveFormsModule\n */\nclass EmailValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'email';\n        /** @internal */\n        this.normalizeInput = ɵcoerceToBoolean;\n        /** @internal */\n        this.createValidator = (input) => emailValidator;\n    }\n    /** @nodoc */\n    enabled(input) {\n        return input;\n    }\n}\nEmailValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: EmailValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nEmailValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: EmailValidator, selector: \"[email][formControlName],[email][formControl],[email][ngModel]\", inputs: { email: \"email\" }, providers: [EMAIL_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: EmailValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                }]\n        }], propDecorators: { email: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MinLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'minlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (minlength) => minLengthValidator(minlength);\n    }\n}\nMinLengthValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MinLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMinLengthValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: MinLengthValidator, selector: \"[minlength][formControlName],[minlength][formControl],[minlength][ngModel]\", inputs: { minlength: \"minlength\" }, host: { properties: { \"attr.minlength\": \"_enabled ? minlength : null\" } }, providers: [MIN_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MinLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': '_enabled ? minlength : null' }\n                }]\n        }], propDecorators: { minlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass MaxLengthValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'maxlength';\n        /** @internal */\n        this.normalizeInput = (input) => toInteger(input);\n        /** @internal */\n        this.createValidator = (maxlength) => maxLengthValidator(maxlength);\n    }\n}\nMaxLengthValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MaxLengthValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMaxLengthValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: { maxlength: \"maxlength\" }, host: { properties: { \"attr.maxlength\": \"_enabled ? maxlength : null\" } }, providers: [MAX_LENGTH_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: MaxLengthValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': '_enabled ? maxlength : null' }\n                }]\n        }], propDecorators: { maxlength: [{\n                type: Input\n            }] } });\n/**\n * @description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * @description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * @usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * @ngModule ReactiveFormsModule\n * @ngModule FormsModule\n * @publicApi\n */\nclass PatternValidator extends AbstractValidatorDirective {\n    constructor() {\n        super(...arguments);\n        /** @internal */\n        this.inputName = 'pattern';\n        /** @internal */\n        this.normalizeInput = (input) => input;\n        /** @internal */\n        this.createValidator = (input) => patternValidator(input);\n    }\n}\nPatternValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: PatternValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nPatternValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.10\", type: PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: { pattern: \"pattern\" }, host: { properties: { \"attr.pattern\": \"_enabled ? pattern : null\" } }, providers: [PATTERN_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: PatternValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': '_enabled ? pattern : null' }\n                }]\n        }], propDecorators: { pattern: [{\n                type: Input\n            }] } });\n\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n    MinValidator,\n    MaxValidator,\n];\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n}\nɵInternalFormsSharedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵInternalFormsSharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nɵInternalFormsSharedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵInternalFormsSharedModule, declarations: [ɵNgNoValidate,\n        NgSelectOption,\n        ɵNgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n        EmailValidator,\n        MinValidator,\n        MaxValidator], imports: [RadioControlRegistryModule], exports: [ɵNgNoValidate,\n        NgSelectOption,\n        ɵNgSelectMultipleOption,\n        DefaultValueAccessor,\n        NumberValueAccessor,\n        RangeValueAccessor,\n        CheckboxControlValueAccessor,\n        SelectControlValueAccessor,\n        SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor,\n        NgControlStatus,\n        NgControlStatusGroup,\n        RequiredValidator,\n        MinLengthValidator,\n        MaxLengthValidator,\n        PatternValidator,\n        CheckboxRequiredValidator,\n        EmailValidator,\n        MinValidator,\n        MaxValidator] });\nɵInternalFormsSharedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵInternalFormsSharedModule, imports: [RadioControlRegistryModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ɵInternalFormsSharedModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    imports: [RadioControlRegistryModule],\n                    exports: SHARED_FORM_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` accepts one generic argument, which is the type of the controls inside.\n * If you need a heterogenous array, use {@link UntypedFormArray}.\n *\n * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,\n * along with `FormControl`, `FormGroup`, and `FormRecord`.\n *\n * @usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * @publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({\n            onlySelf: true,\n            // If `asyncValidator` is present, it will trigger control status change from `PENDING` to\n            // `VALID` or `INVALID`.\n            // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`\n            // to `true` to allow that during the control creation process.\n            emitEvent: !!this.asyncValidator\n        });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap\n     *     around from the back, and if index is greatly negative (less than `-length`), the result is\n     * undefined. This behavior is the same as `Array.at(index)`.\n     */\n    at(index) {\n        return this.controls[this._adjustIndex(index)];\n    }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is added.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    push(control, options = {}) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param index Index in the array to insert the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.\n     * This behavior is the same as `Array.splice(index, 0, control)`.\n     * @param control Form control to be inserted\n     * @param options Specifies whether this FormArray instance should emit events after a new\n     *     control is inserted.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * inserted. When false, no events are emitted.\n     */\n    insert(index, control, options = {}) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param index Index in the array to remove the control.  If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), removes the first\n     *     element. This behavior is the same as `Array.splice(index, 1)`.\n     * @param options Specifies whether this FormArray instance should emit events after a\n     *     control is removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * removed. When false, no events are emitted.\n     */\n    removeAt(index, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param index Index in the array to replace the control. If `index` is negative, wraps around\n     *     from the back. If `index` is greatly negative (less than `-length`), replaces the first\n     *     element. This behavior is the same as `Array.splice(index, 1, control)`.\n     * @param control The `AbstractControl` control to replace the existing control\n     * @param options Specifies whether this FormArray instance should emit events after an\n     *     existing control is replaced with a new one.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control is\n     * replaced with a new one. When false, no events are emitted.\n     */\n    setControl(index, control, options = {}) {\n        // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.\n        let adjustedIndex = this._adjustIndex(index);\n        if (adjustedIndex < 0)\n            adjustedIndex = 0;\n        if (this.controls[adjustedIndex])\n            this.controls[adjustedIndex]._registerOnCollectionChange(() => { });\n        this.controls.splice(adjustedIndex, 1);\n        if (control) {\n            this.controls.splice(adjustedIndex, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     */\n    get length() {\n        return this.controls.length;\n    }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * @usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    setValue(value, options = {}) {\n        assertAllValuesPresent(this, false, value);\n        value.forEach((newValue, index) => {\n            assertControlPresent(this, false, index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * @usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param value Array of latest values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when the control\n     * value is updated. When false, no events are emitted. The configuration options are passed to\n     * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.\n     */\n    patchValue(value, options = {}) {\n        // Even though the `value` argument type doesn't allow `null` and `undefined` values, the\n        // `patchValue` can be called recursively and inner data structures might have these values,\n        // so we just ignore such cases when a field containing FormArray instance receives `null` or\n        // `undefined` as a value.\n        if (value == null /* both `null` and `undefined` */)\n            return;\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * @usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(arr.value);  // ['last']\n     * console.log(arr.at(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param value Array of values for the controls\n     * @param options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     */\n    getRawValue() {\n        return this.controls.map((control) => control.getRawValue());\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * @param options Specifies whether this FormArray instance should emit events after all\n     *     controls are removed.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges` observables emit events with the latest status and value when all controls\n     * in this FormArray instance are removed. When false, no events are emitted.\n     *\n     * @usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     */\n    clear(options = {}) {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((control) => control._registerOnCollectionChange(() => { }));\n        this.controls.splice(0);\n        this.updateValueAndValidity({ emitEvent: options.emitEvent });\n    }\n    /**\n     * Adjusts a negative index by summing it with the length of the array. For very negative\n     * indices, the result may remain negative.\n     * @internal\n     */\n    _adjustIndex(index) {\n        return index < 0 ? index + this.length : index;\n    }\n    /** @internal */\n    _syncPendingControls() {\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /** @internal */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => {\n            cb(control, index);\n        });\n    }\n    /** @internal */\n    _updateValue() {\n        this.value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /** @internal */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /** @internal */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /** @internal */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n    /** @internal */\n    _find(name) {\n        return this.at(name) ?? null;\n    }\n}\nconst UntypedFormArray = FormArray;\n/**\n * @description\n * Asserts that the given control is an instance of `FormArray`\n *\n * @publicApi\n */\nconst isFormArray = (control) => control instanceof FormArray;\n\nfunction isAbstractControlOptions(options) {\n    return !!options &&\n        (options.asyncValidators !== undefined ||\n            options.validators !== undefined ||\n            options.updateOn !== undefined);\n}\n// clang-format on\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass FormBuilder {\n    constructor() {\n        this.useNonNullable = false;\n    }\n    /**\n     * @description\n     * Returns a FormBuilder in which automatically constructed `FormControl` elements\n     * have `{nonNullable: true}` and are non-nullable.\n     *\n     * **Constructing non-nullable controls**\n     *\n     * When constructing a control, it will be non-nullable, and will reset to its initial value.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.control('Alex'); // FormControl<string>\n     * name.reset();\n     * console.log(name); // 'Alex'\n     * ```\n     *\n     * **Constructing non-nullable groups or arrays**\n     *\n     * When constructing a group or array, all automatically created inner controls will be\n     * non-nullable, and will reset to their initial values.\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>\n     * name.reset();\n     * console.log(name); // {who: 'Alex'}\n     * ```\n     * **Constructing *nullable* fields on groups or arrays**\n     *\n     * It is still possible to have a nullable field. In particular, any `FormControl` which is\n     * *already* constructed will not be altered. For example:\n     *\n     * ```ts\n     * let nnfb = new FormBuilder().nonNullable;\n     * // FormGroup<{who: FormControl<string|null>}>\n     * let name = nnfb.group({who: new FormControl('Alex')});\n     * name.reset(); console.log(name); // {who: null}\n     * ```\n     *\n     * Because the inner control is constructed explicitly by the caller, the builder has\n     * no control over how it is created, and cannot exclude the `null`.\n     */\n    get nonNullable() {\n        const nnfb = new FormBuilder();\n        nnfb.useNonNullable = true;\n        return nnfb;\n    }\n    group(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        let newOptions = {};\n        if (isAbstractControlOptions(options)) {\n            // `options` are `AbstractControlOptions`\n            newOptions = options;\n        }\n        else if (options !== null) {\n            // `options` are legacy form group options\n            newOptions.validators = options.validator;\n            newOptions.asyncValidators = options.asyncValidator;\n        }\n        return new FormGroup(reducedControls, newOptions);\n    }\n    /**\n     * @description\n     * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object\n     * containing all the keys and corresponding inner control types.\n     *\n     * @param controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param options Configuration options object for the `FormRecord`. The object should have the\n     * `AbstractControlOptions` type and might contain the following fields:\n     * * `validators`: A synchronous validator function, or an array of validator functions.\n     * * `asyncValidators`: A single async validator or array of async validator functions.\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'\n     * | submit').\n     */\n    record(controls, options = null) {\n        const reducedControls = this._reduceControls(controls);\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormRecord(reducedControls, options);\n    }\n    /**\n     * @description\n     * Constructs a new `FormControl` with the given state, validators and options. Sets\n     * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the\n     * control will be nullable. Accepts a single generic argument, which is the type  of the\n     * control's value.\n     *\n     * @param formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or a `FormControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        let newOptions = {};\n        if (!this.useNonNullable) {\n            return new FormControl(formState, validatorOrOpts, asyncValidator);\n        }\n        if (isAbstractControlOptions(validatorOrOpts)) {\n            // If the second argument is options, then they are copied.\n            newOptions = validatorOrOpts;\n        }\n        else {\n            // If the other arguments are validators, they are copied into an options object.\n            newOptions.validators = validatorOrOpts;\n            newOptions.asyncValidators = asyncValidator;\n        }\n        return new FormControl(formState, { ...newOptions, nonNullable: true });\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options. Accepts a single generic argument, which is the type of each control\n     * inside the array.\n     *\n     * @param controls An array of child controls or control configs. Each child control is given an\n     *     index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an\n     *     `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator functions.\n     */\n    array(controls, validatorOrOpts, asyncValidator) {\n        const createdControls = controls.map(c => this._createControl(c));\n        // Cast to `any` because the inferred types are not as specific as Element.\n        return new FormArray(createdControls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(controls) {\n        const createdControls = {};\n        Object.keys(controls).forEach(controlName => {\n            createdControls[controlName] = this._createControl(controls[controlName]);\n        });\n        return createdControls;\n    }\n    /** @internal */\n    _createControl(controls) {\n        if (controls instanceof FormControl) {\n            return controls;\n        }\n        else if (controls instanceof AbstractControl) { // A control; just return it\n            return controls;\n        }\n        else if (Array.isArray(controls)) { // ControlConfig Tuple\n            const value = controls[0];\n            const validator = controls.length > 1 ? controls[1] : null;\n            const asyncValidator = controls.length > 2 ? controls[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else { // T or FormControlState<T>\n            return this.control(controls);\n        }\n    }\n}\nFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * @description\n * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed\n * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.\n *\n * @publicApi\n */\nclass NonNullableFormBuilder {\n}\nNonNullableFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NonNullableFormBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNonNullableFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NonNullableFormBuilder, providedIn: 'root', useFactory: () => inject(FormBuilder).nonNullable });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: NonNullableFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useFactory: () => inject(FormBuilder).nonNullable,\n                }]\n        }] });\n/**\n * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.\n */\nclass UntypedFormBuilder extends FormBuilder {\n    group(controlsConfig, options = null) {\n        return super.group(controlsConfig, options);\n    }\n    /**\n     * Like `FormBuilder#control`, except the resulting control is untyped.\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return super.control(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Like `FormBuilder#array`, except the resulting array is untyped.\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        return super.array(controlsConfig, validatorOrOpts, asyncValidator);\n    }\n}\nUntypedFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: UntypedFormBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nUntypedFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: UntypedFormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: UntypedFormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the forms package.\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('15.2.10');\n\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * Providers associated with this module:\n * * `RadioControlRegistry`\n *\n * @see [Forms Overview](/guide/forms-overview)\n * @see [Template-driven Forms Guide](/guide/forms)\n *\n * @publicApi\n */\nclass FormsModule {\n    /**\n     * @description\n     * Provides options for configuring the forms module.\n     *\n     * @param opts An object of configuration options\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [{\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n                }]\n        };\n    }\n}\nFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: FormsModule, declarations: [NgModel, NgModelGroup, NgForm], exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm] });\nFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormsModule, imports: [ɵInternalFormsSharedModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: FormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                }]\n        }] });\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n *\n * Providers associated with this module:\n * * `FormBuilder`\n * * `RadioControlRegistry`\n *\n * @see [Forms Overview](guide/forms-overview)\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * @description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more\n     * correct, or to only call it `whenDisabled`, which is the legacy behavior.\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [\n                {\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl ?? 'always'\n                },\n                {\n                    provide: CALL_SET_DISABLED_STATE,\n                    useValue: opts.callSetDisabledState ?? setDisabledStateDefault\n                }\n            ]\n        };\n    }\n}\nReactiveFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ReactiveFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nReactiveFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: ReactiveFormsModule, declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName], exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName] });\nReactiveFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ReactiveFormsModule, imports: [ɵInternalFormsSharedModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: ReactiveFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                }]\n        }] });\n\n/**\n * @module\n * @description\n * This module is used for handling user input, by defining and building a `FormGroup` that\n * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`\n * objects can then be used to read information from the form DOM elements.\n *\n * Forms providers are not included in default providers; you must import these providers\n * explicitly.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormRecord, FormsModule, MaxLengthValidator, MaxValidator, MinLengthValidator, MinValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NonNullableFormBuilder, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, VERSION, Validators, isFormArray, isFormControl, isFormGroup, isFormRecord, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption };\n"],"names":["RouterModule","OfferFormComponent","PdfPreviewComponent","StatusTrackerComponent","routes","path","redirectTo","pathMatch","component","data","showWelcome","JobOfferRoutingModule","forChild","imports","exports","CommonModule","ReactiveFormsModule","HttpClientModule","JobOfferModule","declarations","SignatureStatus","EventEmitter","Validators","Subject","takeUntil","i0","constructor","fb","jobOfferService","minDate","Date","toISOString","split","ngOnInit","initializeForm","subscribeToStatusUpdates","ngOnDestroy","destroy$","next","complete","offerForm","group","recipientName","required","minLength","recipientEmail","email","jobTitle","department","salary","min","startDate","futureDateValidator","offerContent","patchValue","placeholderText","status$","pipe","subscribe","status","updateButtonStates","canPreview","GENERATED","SENT","COMPLETED","canSend","isSent","DELIVERED","VIEWED","SIGNED","onSubmit","valid","isLoading","generateOfferLetter","clearMessages","formData","value","offerData","id","generateId","response","success","currentOfferId","successMessage","pdfGenerated","emit","offerId","pdfUrl","errorMessage","message","error","console","onPreviewPDF","getPreviewUrl","window","open","previewUrl","onSendForSignature","sendForSignature","sentForSignature","envelopeId","isFieldInvalid","fieldName","field","get","invalid","dirty","touched","getFieldError","errors","requiredLength","control","selectedDate","today","setHours","futureDate","Math","random","toString","substr","resetForm","reset","resetState","getFormData","selectors","outputs","decls","vars","consts","template","ctx","BehaviorSubject","throwError","catchError","map","JobOfferService","http","DRAFT","currentOfferSubject","asObservable","statusSubject","activitiesSubject","statusUpdatesSubject","initializeStatusPolling","post","apiUrl","updateStatus","addActivity","handleError","startEnvelopeStatusPolling","checkSignatureStatus","getOfferHistory","title","timestamp","description","icon","colorClass","currentActivities","newActivity","updatedActivities","slice","statusSequence","delay","forEach","update","setTimeout","getStatusTitle","getStatusIcon","getStatusColor","titles","DECLINED","EXPIRED","icons","colors","ErrorEvent","Error","getCurrentOffer","getCurrentStatus","factory","providedIn","Observable","argsArgArrayOrObject","innerFrom","popResultSelector","createOperatorSubscriber","mapOneOrManyArgs","createObject","forkJoin","args","resultSelector","sources","keys","result","subscriber","length","values","Array","remainingCompletions","remainingEmissions","sourceIndex","hasValue","undefined","operate","noop","notifier","source","closed","i1","DOCUMENT","ɵparseCookieValue","XhrFactory","XhrFactory$1","Injectable","InjectionToken","inject","Inject","PLATFORM_ID","makeEnvironmentProviders","NgModule","of","concatMap","filter","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","line","index","indexOf","name","key","toLowerCase","trim","maybeSetNormalizedName","has","push","set","ngDevMode","assertValidHeaders","Object","entries","headerValues","init","from","getAll","append","clone","op","delete","lcName","copyFrom","applyUpdate","other","concat","base","toDelete","existing","fn","isArray","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","addBody","observe","HttpClient","handler","request","first","req","events$","handle","res$","event","head","jsonp","callbackParam","patch","put","ɵfac","ɵprov","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","optional","reduceRight","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","cleanup","parentNode","removeChild","onLoad","then","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","disable","ngModule","withOptions","ɵmod","ɵinj","HttpClientJsonpModule","ɵHttpInterceptingHandler","ɵHttpInterceptorHandler","Directive","forwardRef","Optional","ɵisPromise","ɵisObservable","ɵRuntimeError","Self","Input","Host","SkipSelf","ɵcoerceToBoolean","ChangeDetectorRef","Output","Version","ɵgetDOM","BaseControlValueAccessor","_renderer","_elementRef","onChange","_","onTouched","setProperty","nativeElement","registerOnTouched","registerOnChange","setDisabledState","isDisabled","Renderer2","ElementRef","ɵdir","BuiltInControlValueAccessor","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","CheckboxControlValueAccessor","writeValue","selector","host","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","_isAndroid","userAgent","getUserAgent","COMPOSITION_BUFFER_MODE","renderer","elementRef","_compositionMode","_composing","normalizedValue","_handleInput","_compositionStart","_compositionEnd","NG_DEV_MODE$1","isEmptyInputValue","hasValidLength","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","minValidator","max","maxValidator","requiredValidator","requiredTrue","requiredTrueValidator","emailValidator","minLengthValidator","maxLength","maxLengthValidator","pattern","patternValidator","nullValidator","compose","validators","composeAsync","parseFloat","isNaN","regex","regexStr","charAt","RegExp","isPresent","o","toObservable","obs","mergeErrors","arrayOfErrors","executeValidators","validator","isValidatorFn","validate","normalizeValidators","c","presentValidators","composeValidators","observables","composeAsyncValidators","mergeValidators","controlValidators","dirValidator","getControlValidators","_rawValidators","getControlAsyncValidators","_rawAsyncValidators","makeValidatorsArray","hasValidator","includes","addValidators","currentValidators","current","validatorsToAdd","removeValidators","AbstractControlDirective","_onDestroyCallbacks","pending","disabled","enabled","pristine","untouched","statusChanges","valueChanges","_setValidators","_composedValidatorFn","_setAsyncValidators","_composedAsyncValidatorFn","asyncValidator","_registerOnDestroy","_invokeOnDestroyCallbacks","hasError","errorCode","getError","ControlContainer","formDirective","NgControl","arguments","_parent","valueAccessor","AbstractControlStatus","cd","_cd","isTouched","isUntouched","isPristine","isDirty","isValid","isInvalid","isPending","isSubmitted","submitted","ngControlStatusHost","ngGroupStatusHost","NgControlStatus","NgControlStatusGroup","formControlNameExample","formGroupNameExample","formArrayNameExample","ngModelGroupExample","ngModelWithFormGroupExample","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","asyncValidatorsDroppedWithOptsWarning","ngModelWarning","directiveName","describeKey","isFormGroup","noControlsError","missingControlError","missingControlValueError","NG_DEV_MODE","VALID","INVALID","PENDING","DISABLED","pickValidators","validatorOrOpts","isOptionsObj","coerceToValidator","pickAsyncValidators","warn","asyncValidators","coerceToAsyncValidator","assertControlPresent","parent","isGroup","controls","collection","assertAllValuesPresent","_forEachChild","AbstractControl","_pendingDirty","_hasOwnPendingAsyncValidator","_pendingTouched","_onCollectionChange","_onDisabledChange","_assignValidators","_assignAsyncValidators","validatorFn","asyncValidatorFn","updateOn","_updateOn","setValidators","setAsyncValidators","addAsyncValidators","removeAsyncValidators","hasAsyncValidator","clearValidators","clearAsyncValidators","markAsTouched","opts","onlySelf","markAllAsTouched","markAsUntouched","_updateTouched","markAsDirty","markAsPristine","_updatePristine","markAsPending","emitEvent","skipPristineCheck","_parentMarkedDirty","_updateValue","_updateAncestors","changeFn","enable","updateValueAndValidity","setParent","getRawValue","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","currPath","_find","root","x","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_registerOnCollectionChange","_setUpdateStrategy","parentDirty","FormGroup","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","hasOwnProperty","setValue","_reduceChildren","acc","_syncPendingControls","subtreeUpdated","updated","child","cb","_reduceValue","condition","initValue","UntypedFormGroup","FormRecord","isFormRecord","CALL_SET_DISABLED_STATE","setDisabledStateDefault","controlPath","setUpControl","dir","callSetDisabledState","_throwError","_throwMissingValueAccessorError","setUpValidators","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setUpDisabledChangeHandler","cleanUpControl","validateControlPresenceOnChange","_noControlError","cleanUpValidators","registerOnValidatorChange","onDisabledChange","registerOnDisabledChange","_unregisterOnDisabledChange","onValidatorChange","isControlUpdated","updatedValidators","updatedAsyncValidators","newValue","_pendingValue","_pendingChange","updateControl","emitModelToViewChange","viewToModelUpdate","emitModelEvent","_unregisterOnChange","setUpFormContainer","cleanUpFormContainer","messageEnd","_describeControlLocation","loc","_throwInvalidValueAccessorError","isPropertyUpdated","changes","viewModel","change","isFirstChange","is","currentValue","isBuiltInAccessor","getPrototypeOf","syncPendingControls","form","directives","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","removeListItem$1","el","_ngModelWarning","instance","warningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","formDirectiveProvider$1","NgForm","resolvedPromise$1","_directives","ngSubmit","ngAfterViewInit","container","_findContainer","add","getControl","addFormGroup","removeFormGroup","getFormGroup","updateModel","$event","target","onReset","pop","exportAs","removeListItem","isFormControlState","formState","FormControl","_onChange","_applyFormState","nonNullable","initialValueIsDefault","emitViewToModelChange","UntypedFormControl","isFormControl","AbstractFormGroupDirective","_checkParentType","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","modelGroupProvider","NgModelGroup","formControlBinding$1","NgModel","_changeDetectorRef","_registered","ngOnChanges","_checkForErrors","_checkName","oldName","previousValue","_getPath","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","markForCheck","disabledValue","ɵNgNoValidate","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","throwNameError","RadioControlRegistryModule","RadioControlRegistry","_accessors","accessor","remove","i","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","setDisabledStateFired","_state","_fn","formControlName","Injector","RANGE_VALUE_ACCESSOR","RangeValueAccessor","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding","FormControlDirective","_ngModelWarningConfig","_isControlChanged","previousForm","formDirectiveProvider","FormGroupDirective","_updateDomValue","_checkFormPresent","_updateValidators","_updateRegistrations","_oldForm","_setUpFormContainer","_cleanUpFormContainer","addFormArray","removeFormArray","getFormArray","oldCtrl","newCtrl","formGroupNameProvider","FormGroupName","_hasInvalidParent","formArrayNameProvider","FormArrayName","controlNameBinding","FormControlName","_added","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_buildValueString$1","_extractId$1","valueString","_optionMap","_idCounter","_compareWith","compareWith","_getOptionId","_getOptionValue","_registerOption","NgSelectOption","_element","_select","ngValue","_setElementValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","_buildValueString","_extractId","HTMLCollection","optionSelectedStateSetter","ids","opt","_setSelected","element","selected","selectedOptions","ɵNgSelectMultipleOption","toInteger","parseInt","toFloat","AbstractValidatorDirective","_validator","inputName","input","normalizeInput","_enabled","createValidator","MAX_VALIDATOR","MaxValidator","MIN_VALIDATOR","MinValidator","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","EMAIL_VALIDATOR","EmailValidator","MIN_LENGTH_VALIDATOR","MinLengthValidator","minlength","MAX_LENGTH_VALIDATOR","MaxLengthValidator","maxlength","PATTERN_VALIDATOR","PatternValidator","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","ɵInternalFormsSharedModule","FormArray","at","_adjustIndex","_registerControl","insert","removeAt","adjustedIndex","clear","some","UntypedFormArray","isFormArray","isAbstractControlOptions","FormBuilder","useNonNullable","nnfb","reducedControls","_reduceControls","newOptions","record","array","createdControls","_createControl","NonNullableFormBuilder","UntypedFormBuilder","controlsConfig","VERSION","FormsModule","withConfig","warnOnNgModelWithFormControl"],"sourceRoot":"webpack:///","x_google_ignoreList":[10,11,12,13]}